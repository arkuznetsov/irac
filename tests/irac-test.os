// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/irac/
// ----------------------------------------------------------

#Использовать "../src"
#Использовать "./fixtures"
#Использовать asserts
#Использовать fs
#Использовать moskito

Перем ЮнитТест;
Перем ИспользоватьМок;
Перем АгентКластера;
Перем ИсполнительКоманд;

// Процедура выполняется после запуска теста
//
Процедура ПередЗапускомТеста() Экспорт
	
	Лог = Служебный.Лог();

	Лог.УстановитьУровень(УровниЛога.Отладка);
	
	АдресСервера = СтрШаблон("%1:%2",
	                         ПараметрыТестирования.Параметры().Агент_Адрес,
	                         ПараметрыТестирования.Параметры().Агент_Порт);

	Если АгентКластера = Неопределено Тогда
		АгентКластера = Новый УправлениеКластером1С(, АдресСервера);
		ПараметрыТестирования.УстановитьАгентКластера(АгентКластера);
	КонецЕсли;

	Если ИсполнительКоманд = Неопределено Тогда
		ИспользоватьМок = Истина;

		ИспользоватьМок = ПараметрыТестирования.Параметры().ЭтоСерверСборок;

		Если ИспользоватьМок Тогда
			ИсполнительКоманд = Мок.Получить(Новый ИсполнительКоманд());
		Иначе
			ИсполнительКоманд = Новый ИсполнительКоманд("8.3");
		КонецЕсли;    
	КонецЕсли;

	АгентКластера.УстановитьИсполнительКоманд(ИсполнительКоманд);
	
КонецПроцедуры // ПередЗапускомТеста()

// Функция возвращает список тестов для выполнения
//
// Параметры:
//    Тестирование    - Тестер        - Объект Тестер (1testrunner)
//    
// Возвращаемое значение:
//    Массив        - Массив имен процедур-тестов
//    
Функция ПолучитьСписокТестов(Тестирование) Экспорт
	
	ЮнитТест = Тестирование;
	
	СписокТестов = Новый Массив;
	СписокТестов.Добавить("ТестДолжен_ПодключитьсяКСерверуАдминистрирования");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокАдминистраторовАгента");
	СписокТестов.Добавить("ТестДолжен_ДобавитьАдминистратораАгента");
	СписокТестов.Добавить("ТестДолжен_УдалитьАдминистратораАгента");

	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокКластеров");
	СписокТестов.Добавить("ТестДолжен_ПолучитьПараметрыКластера");
	СписокТестов.Добавить("ТестДолжен_ИзменитьПараметрыКластера");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокАдминистраторовКластера");
	СписокТестов.Добавить("ТестДолжен_ДобавитьАдминистратораКластера");
	СписокТестов.Добавить("ТестДолжен_УдалитьАдминистратораКластера");

	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокМенеджеров");
	СписокТестов.Добавить("ТестДолжен_ПолучитьПараметрыМенеджера");

	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокСерверовКластера");
	СписокТестов.Добавить("ТестДолжен_ПолучитьПараметрыСервераКластера");
	СписокТестов.Добавить("ТестДолжен_ДобавитьСерверКластера");
	СписокТестов.Добавить("ТестДолжен_УдалитьСерверКластера");

	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокРабочихПроцессов");
	СписокТестов.Добавить("ТестДолжен_ПолучитьПараметрыРабочегоПроцесса");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокЛицензийПроцесса");

	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокБазНаСервере");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСокращенныеПараметрыБазыНаСервере");
	СписокТестов.Добавить("ТестДолжен_ПолучитьПолныеПараметрыБазыНаСервере");
	СписокТестов.Добавить("ТестДолжен_ДобавитьИнформационнуюБазу");
	
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокСеансовКластера");
	СписокТестов.Добавить("ТестДолжен_ПолучитьИерархическийСписокСеансовКластера");
	СписокТестов.Добавить("ТестДолжен_ПолучитьПараметрыСеансаКластера");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокЛицензийСеанса");

	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокСоединенийКластера");

	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокБлокировокКластера");

	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокСервисовКластера");

	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокНазначенийФункциональностиСервера");
	СписокТестов.Добавить("ТестДолжен_ПолучитьПараметрыНазначенияФункциональностиСервера");

	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокПрофилейБезопасностиКластера");
	СписокТестов.Добавить("ТестДолжен_ПолучитьПараметрыПрофиляБезопасностиКластера");

	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокКаталоговПрофиля");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокCOMКлассовПрофиля");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокКомпонентПрофиля");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокМодулейПрофиля");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокПриложенийПрофиля");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокИнтернетРесурсовПрофиля");

	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокСчетчиковРесурсов");
	СписокТестов.Добавить("ТестДолжен_ПолучитьПараметрыСчетчиковРесурсов");
	СписокТестов.Добавить("ТестДолжен_ПолучитьЗначенияСчетчикаРесурсов");

	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокОграниченийРесурсов");
	СписокТестов.Добавить("ТестДолжен_ПолучитьПараметрыОграниченийРесурсов");

	Возврат СписокТестов;
	
КонецФункции // ПолучитьСписокТестов()

// Процедура выполняется после запуска теста
//
Процедура ПослеЗапускаТеста() Экспорт

КонецПроцедуры // ПослеЗапускаТеста()

// Процедура - тест
//
Процедура ТестДолжен_ПодключитьсяКСерверуАдминистрирования() Экспорт
	
	СтрокаПроверки = ПараметрыТестирования.Параметры().Агент_Адрес + ":" 
	               + ПараметрыТестирования.Параметры().Агент_Порт;
	ДлинаСтроки = СтрДлина(СтрокаПроверки);

	Утверждения.ПроверитьРавенство(Лев(АгентКластера.ОписаниеПодключения(), ДлинаСтроки), СтрокаПроверки);

КонецПроцедуры // ТестДолжен_ПодключитьсяКСерверуАдминистрирования()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокАдминистраторовАгента() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Администраторы.Список");
	
	АгентКластера.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Агент_Администратор,
	                                       ПараметрыТестирования.Параметры().Агент_Пароль);

	Администраторы = АгентКластера.Администраторы();

	Утверждения.ПроверитьБольше(Администраторы.Количество(), 0, "Не удалось получить список администраторов");

КонецПроцедуры // ТестДолжен_ПолучитьСписокАдминистраторовАгента()

// Процедура - тест
//
Процедура ТестДолжен_ДобавитьАдминистратораАгента() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Администраторы.Список");
	
	АгентКластера.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Агент_Администратор,
	                                        ПараметрыТестирования.Параметры().Агент_Пароль);

	Администраторы = АгентКластера.Администраторы();

	ТекущееКоличество = Администраторы.Количество();

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "Администраторы.СписокПослеДобавления");
	
	Администраторы.Добавить("НовыйАдминистратор", Новый Структура("Пароль", "123"));

	НовоеКоличество = Администраторы.Количество();

	Утверждения.ПроверитьБольше(НовоеКоличество,
	                            ТекущееКоличество,
	                            "Не удалось проверить добавление администратора агента");

КонецПроцедуры // ТестДолжен_ДобавитьАдминистратораАгента()

// Процедура - тест
//
Процедура ТестДолжен_УдалитьАдминистратораАгента() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "Администраторы.СписокПослеДобавления");
	
	АгентКластера.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Агент_Администратор,
	                                        ПараметрыТестирования.Параметры().Агент_Пароль);

	Администраторы = АгентКластера.Администраторы();

	ТекущееКоличество = Администраторы.Количество();

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Администраторы.Список");
	
	Администраторы.Удалить("НовыйАдминистратор");

	Утверждения.ПроверитьБольше(ТекущееКоличество,
	                            Администраторы.Количество(),
	                            "Не удалось проверить удаление администратора агента");

КонецПроцедуры // ТестДолжен_УдалитьАдминистратораАгента()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокКластеров() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();

	Утверждения.ПроверитьБольше(Кластеры.Количество(), 0, "Не удалось получить список кластеров");

КонецПроцедуры // ТестДолжен_ПолучитьСписокКластеров()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьПараметрыКластера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Параметры");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	Имя = Кластер.Получить("Имя");
	Сервер = Кластер.Получить("Сервер");
	Порт = Кластер.Получить("Порт");
	РежимРаспределенияНагрузки = Кластер.Получить("РежимРаспределенияНагрузки");

	Утверждения.ПроверитьРавенство(Имя, "Локальный кластер", "Ошибка проверки имени кластера");
	Утверждения.ПроверитьРавенство(Сервер, "Sport1", "Ошибка проверки сервера кластера");
	Утверждения.ПроверитьРавенство(Порт, 1541, "Ошибка проверки порта кластера");
	Утверждения.ПроверитьРавенство(РежимРаспределенияНагрузки
	                            , Перечисления.РежимыРаспределенияНагрузки.ПоПроизводительности
	                            , "Ошибка проверки режима распределения нагрузки кластера");
	
КонецПроцедуры // ТестДолжен_ПолучитьПараметрыКластера()

// Процедура - тест
//
Процедура ТестДолжен_ИзменитьПараметрыКластера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Параметры");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ИнтервалПерезапускаДоИзменения = Кластер.Получить("ИнтервалПерезапуска");

	Утверждения.ПроверитьРавенство(ИнтервалПерезапускаДоИзменения,
	                               0,
	                               "Ошибка проверки параметра ""lifetime-limit"" кластера до изменения");

	НовыеПараметры = Новый Структура();
	НовыеПараметры.Вставить("ИнтервалПерезапуска", 86400);
	Кластер.Изменить(, НовыеПараметры);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Изменение");

	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);
	
	ИнтервалПерезапускаПослеИзменения = Кластер.Получить("ИнтервалПерезапуска");

	Утверждения.ПроверитьРавенство(ИнтервалПерезапускаПослеИзменения,
	                               86400,
	                               "Ошибка проверки параметра ""lifetime-limit"" кластера после изменения");
	
КонецПроцедуры // ТестДолжен_ИзменитьПараметрыКластера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокАдминистраторовКластера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "Кластеры.Администраторы.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	Администраторы = Кластер.Администраторы();

	Утверждения.ПроверитьБольше(Администраторы.Количество(), 0, "Не удалось получить список администраторов кластера");

КонецПроцедуры // ТестДолжен_ПолучитьСписокАдминистраторовКластера()

// Процедура - тест
//
Процедура ТестДолжен_ДобавитьАдминистратораКластера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "Кластеры.Администраторы.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	Администраторы = Кластер.Администраторы();

	ТекущееКоличество = Администраторы.Количество();

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "Кластеры.Администраторы.СписокПослеДобавления");

	Администраторы.Добавить("НовыйАдминистратор", Новый Структура("Пароль", "123"));

	НовоеКоличество = Администраторы.Количество();

	Утверждения.ПроверитьБольше(НовоеКоличество,
	                            ТекущееКоличество,
	                            "Не удалось проверить добавление администратора кластера");

КонецПроцедуры // ТестДолжен_ДобавитьАдминистратораКластера()

// Процедура - тест
//
Процедура ТестДолжен_УдалитьАдминистратораКластера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "Кластеры.Администраторы.СписокПослеДобавления");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	Администраторы = Кластер.Администраторы();

	ТекущееКоличество = Администраторы.Количество();

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "Кластеры.Администраторы.Список");
	
	Администраторы.Удалить("НовыйАдминистратор");

	Утверждения.ПроверитьБольше(ТекущееКоличество,
	                            Администраторы.Количество(),
	                            "Не удалось проверить удаление администратора кластера");

КонецПроцедуры // ТестДолжен_УдалитьАдминистратораКластера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокМенеджеров() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Менеджеры.Список");
	
	Менеджеры = Кластер.Менеджеры();

	Утверждения.ПроверитьБольше(Менеджеры.Количество(), 0, "Не удалось получить список менеджеров");

КонецПроцедуры // ТестДолжен_ПолучитьСписокМенеджеров()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьПараметрыМенеджера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Менеджеры.Параметры");
	
	Менеджеры = Кластер.Менеджеры();

	Менеджер = Менеджеры.Получить("Sport1:3388");

	ИдПроцесса = Менеджер.Получить("ИдПроцесса");

	Утверждения.ПроверитьРавенство(ИдПроцесса, 3388, "Ошибка проверки PID процесса менеджера");
	
КонецПроцедуры // ТестДолжен_ПолучитьПараметрыМенеджера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокСерверовКластера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Серверы.Список");
	
	Серверы = Кластер.Серверы();

	Утверждения.ПроверитьБольше(Серверы.Количество(), 0, "Не удалось получить список серверов кластера");
	
КонецПроцедуры // ТестДолжен_ПолучитьСписокСерверовКластера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьПараметрыСервераКластера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Серверы.Параметры");
	
	Серверы = Кластер.Серверы();

	Сервер = Серверы.Получить("Sport1:1540");

	Имя = Сервер.Получить("Имя");
	Хост = Сервер.Получить("СерверАгента");
	Порт = Сервер.Получить("ПортАгента");
	ДиапазонПортов = Сервер.Получить("ДиапазонПортов");

	Утверждения.ПроверитьРавенство(Имя, "Центральный сервер", "Ошибка проверки имени сервера");
	Утверждения.ПроверитьРавенство(Хост, "Sport1", "Ошибка проверки сервера кластера");
	Утверждения.ПроверитьРавенство(Порт, 1540, "Ошибка проверки порта кластера");
	Утверждения.ПроверитьРавенство(ДиапазонПортов, "1560:1591", "Ошибка проверки диапазона портов сервера");
	
КонецПроцедуры // ТестДолжен_ПолучитьПараметрыСервераКластера()

// Процедура - тест
//
Процедура ТестДолжен_ДобавитьСерверКластера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "Серверы.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	Серверы = Кластер.Серверы();

	ТекущееКоличество = Серверы.Количество();

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "Серверы.Добавить");
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "Серверы.СписокПослеДобавления");

	ПараметрыСервера = Новый Структура();
	ПараметрыСервера.Вставить("ДиапазонПортов"                , "1560:1591");
	ПараметрыСервера.Вставить("ЦентральныйСервер"             ,
	                          Перечисления.ВариантыИспользованияРабочегоСервера.Обычный);
	ПараметрыСервера.Вставить("МенеджерПодКаждыйСервис"       ,
	                          Перечисления.ВариантыРазмещенияСервисов.ВОдномМенеджере);
	ПараметрыСервера.Вставить("ПортГлавногоМенеджераКластера" , "1541");

	Серверы.Добавить("Дополнительный сервер", "Sport2", 1540, ПараметрыСервера);

	НовоеКоличество = Серверы.Количество();

	Утверждения.ПроверитьБольше(НовоеКоличество,
	                            ТекущееКоличество,
	                            "Не удалось проверить добавление сервера в кластер");

КонецПроцедуры // ТестДолжен_ДобавитьСерверКластера()

// Процедура - тест
//
Процедура ТестДолжен_УдалитьСерверКластера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "Серверы.СписокПослеДобавления");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	Серверы = Кластер.Серверы();

	ТекущееКоличество = Серверы.Количество();

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "Серверы.Список");
	
	Серверы.Удалить("Sport2:1540");

	Утверждения.ПроверитьБольше(ТекущееКоличество,
	                            Серверы.Количество(),
	                            "Не удалось проверить удаление сервера из кластера");

КонецПроцедуры // ТестДолжен_УдалитьСерверКластера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокРабочихПроцессов() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "РабочиеПроцессы.Список");
	
	Процессы = Кластер.РабочиеПроцессы();

	Утверждения.ПроверитьБольше(Процессы.Количество(), 0, "Не удалось получить список рабочих процессов");
	
КонецПроцедуры // ТестДолжен_ПолучитьСписокРабочихПроцессов()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьПараметрыРабочегоПроцесса() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "РабочиеПроцессы.Список");
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "РабочиеПроцессы.Параметры");
	
	Процессы = Кластер.РабочиеПроцессы();

	Процесс = Процессы.Получить("Sport1:5428");

	Процесс.ОбновитьДанные(Перечисления.РежимыОбновленияДанных.Принудительно);

	АдресСервера = Процесс.Получить("АдресСервера");
	ИдПроцессаОС = Процесс.Получить("ИдПроцессаОС");
	КоличествоСоединений = Процесс.Получить("КоличествоСоединений");

	Утверждения.ПроверитьРавенство(АдресСервера, "Sport1", "Ошибка проверки адреса сервера рабочего процесса");
	Утверждения.ПроверитьРавенство(ИдПроцессаОС, 5428, "Ошибка проверки PID рабочего процесса");
	Утверждения.ПроверитьРавенство(КоличествоСоединений, 7, "Ошибка проверки количества соединений рабочего процесса");

КонецПроцедуры // ТестДолжен_ПолучитьПараметрыРабочегоПроцесса()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокЛицензийПроцесса() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "РабочиеПроцессы.Список");
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "РабочиеПроцессы.Параметры");
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "РабочиеПроцессы.Лицензии.Описание");
	
	Процессы = Кластер.РабочиеПроцессы();

	Процесс = Процессы.Получить("Sport1:5428");

	Процесс.ОбновитьДанные(Перечисления.РежимыОбновленияДанных.Принудительно);

	Лицензии = Процесс.Лицензии();

	Утверждения.ПроверитьБольше(Лицензии.Количество(), 0, "Не удалось получить список лицензий рабочего процесса");
	
КонецПроцедуры // ТестДолжен_ПолучитьСписокЛицензийПроцесса()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокБазНаСервере() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "ИБ.Список");
	
	ИБ = Кластер.ИнформационныеБазы();
	
	Утверждения.ПроверитьБольше(ИБ.Количество(), 0, "Не удалось получить список информационных баз");

КонецПроцедуры // ТестДолжен_ПолучитьСписокБазНаСервере()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСокращенныеПараметрыБазыНаСервере() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "ИБ.Список");
	
	ИБ = Кластер.ИнформационныеБазы();
	
	АгентКластера.ИсполнительКоманд().Когда().КодВозврата().ТогдаВозвращает(-1);
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "ИБ.НедостаточноПрав");
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "ИБ.СокращенныеПараметры");

	ИБ_Имя = ПараметрыТестирования.Параметры().ИБ_Имя;

	База = ИБ.Получить(ИБ_Имя);

	Имя = База.Получить("Имя");
	Описание = База.Получить("Описание");
	ПолноеОписание = База.Получить("ПолноеОписание");

	Утверждения.ПроверитьРавенство(Имя, ИБ_Имя, "Ошибка проверки имени базы");
	Утверждения.ПроверитьРавенство(Описание, "", "Ошибка проверки описания базы");
	Утверждения.ПроверитьРавенство(ПолноеОписание, Ложь, "Ошибка проверки признака полного описания базы");
	
КонецПроцедуры // ТестДолжен_ПолучитьСокращенныеПараметрыБазыНаСервере()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьПолныеПараметрыБазыНаСервере() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "ИБ.Список");
	
	ИБ = Кластер.ИнформационныеБазы();
	
	АгентКластера.ИсполнительКоманд().Когда().КодВозврата().ТогдаВозвращает(0);
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "ИБ.ПолныеПараметры");

	ИБ_Имя = ПараметрыТестирования.Параметры().ИБ_Имя;

	База = ИБ.Получить(ИБ_Имя);
	База.УстановитьАдминистратора(ПараметрыТестирования.Параметры().ИБ_Администратор,
	                              ПараметрыТестирования.Параметры().ИБ_Пароль);

	Имя            = База.Получить("Имя", Перечисления.РежимыОбновленияДанных.Принудительно);
	Описание       = База.Получить("Описание");
	ПолноеОписание = База.Получить("ПолноеОписание");
	ТипСУБД        = База.Получить("ТипСУБД");
	ИмяБазыСУБД    = База.Получить("ИмяБазыСУБД");

	Утверждения.ПроверитьРавенство(Имя, ИБ_Имя, "Ошибка проверки имени базы");
	Утверждения.ПроверитьРавенство(Описание, "", "Ошибка проверки описания базы");
	Утверждения.ПроверитьРавенство(ПолноеОписание, Истина, "Ошибка проверки признака полного описания базы");
	Утверждения.ПроверитьРавенство(ТипСУБД, Перечисления.ТипыСУБД.MSSQLServer, "Ошибка проверки типа сервера СУБД");
	Утверждения.ПроверитьРавенство(ИмяБазыСУБД, ИБ_Имя, "Ошибка проверки имени базы на сервере СУБД");
	
КонецПроцедуры // ТестДолжен_ПолучитьПолныеПараметрыБазыНаСервере()

// Процедура - тест
//
Процедура ТестДолжен_ДобавитьИнформационнуюБазу() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ИБ_Имя = ПараметрыТестирования.Параметры().НоваяИБ_Имя;

	ПараметрыИБ = Новый Структура();

	ПараметрыИБ.Вставить("ТипСУБД"                              , Перечисления.ТипыСУБД.MSSQLServer);
	ПараметрыИБ.Вставить("АдресСервераСУБД"                     , "localhost");
	ПараметрыИБ.Вставить("ИмяБазыСУБД"                          , ИБ_Имя);
	ПараметрыИБ.Вставить("ИмяПользователяБазыСУБД"              , "_1CSrvUsr1");
	ПараметрыИБ.Вставить("ПарольПользователяБазыСУБД"           , "q2w3e4r5");
	ПараметрыИБ.Вставить("БлокировкаРегламентныхЗаданийВключена", Перечисления.СостоянияВыключателя.Выключено);
	ПараметрыИБ.Вставить("ВыдачаЛицензийСервером"               , Перечисления.ПраваДоступа.Разрешено);

	ИБ = Кластер.ИнформационныеБазы();
	ИБ.ОбновитьДанные(Перечисления.РежимыОбновленияДанных.Принудительно);
	КоличествоИБ = ИБ.Количество();
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "ИБ.Добавить");
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "ИБ.СписокПослеДобавления");
	
	ИБ.Добавить(ИБ_Имя, , Истина, ПараметрыИБ);

	Утверждения.ПроверитьРавенство(ИБ.Количество() - КоличествоИБ, 1, "Ошибка проверки количества баз");

	База = ИБ.Получить(ИБ_Имя);

	Имя = База.Получить("Имя");
	Описание = База.Получить("Описание");
	ПолноеОписание = База.Получить("ПолноеОписание");

	Утверждения.ПроверитьРавенство(Имя, ИБ_Имя, "Ошибка проверки имени базы");
	Утверждения.ПроверитьРавенство(Описание, "", "Ошибка проверки описания базы");
	Утверждения.ПроверитьРавенство(ПолноеОписание, Ложь, "Ошибка проверки признака полного описания базы");
	
КонецПроцедуры // ТестДолжен_ДобавитьИнформационнуюБазу()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокСеансовКластера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Сеансы.Список");
	
	Сеансы = Кластер.Сеансы();
	
	Утверждения.ПроверитьБольше(Сеансы.Количество(), 0, "Не удалось получить список сеансов");

КонецПроцедуры // ТестДолжен_ПолучитьСписокСеансовКластера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьИерархическийСписокСеансовКластера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Сеансы.Список");
	
	Сеансы = Кластер.Сеансы().ИерархическийСписок("host,Пользователь");
	
	СеансыКомпьютера = Сеансы["Sport1"];

	Утверждения.ПроверитьБольше(СеансыКомпьютера.Количество(), 0, "Не удалось получить список сеансов");

КонецПроцедуры // ТестДолжен_ПолучитьИерархическийСписокСеансовКластера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьПараметрыСеансаКластера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Сеансы.Параметры");
	
	ИБ_Имя = ПараметрыТестирования.Параметры().ИБ_Имя;

	Сеансы = Кластер.Сеансы();
	
	Сеанс = Сеансы.Получить(ИБ_Имя + ":1");

	Компьютер = Сеанс.Получить("Компьютер");
	Пользователь = Сеанс.Получить("Пользователь");
	Приложение = Сеанс.Получить("Приложение");

	Утверждения.ПроверитьРавенство(Компьютер, "Sport1", "Ошибка проверки компьютера сеанса");
	Утверждения.ПроверитьРавенство(Пользователь, "АКузнецов", "Ошибка проверки пользователя сеанса");
	Утверждения.ПроверитьРавенство(Приложение, "Designer", "Ошибка проверки типа приложения сеанса");

КонецПроцедуры // ТестДолжен_ПолучитьПараметрыСеансаКластера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокЛицензийСеанса() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Сеансы.Список");

	Сеансы = Кластер.Сеансы().Список();

	Для Каждого Сеанс Из Сеансы Цикл
		ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Сеансы.Лицензии.Описание");
		
		Сеанс.ОбновитьДанные(Перечисления.РежимыОбновленияДанных.Принудительно);

		Лицензии = Сеанс.Лицензии();
		Прервать;
	КонецЦикла;

	Утверждения.ПроверитьБольше(Лицензии.Количество(), 0, "Не удалось получить список лицензий сеанса");
	
КонецПроцедуры // ТестДолжен_ПолучитьСписокЛицензийСеанса()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокСоединенийКластера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "Соединения.Список");
	
	Соединения = Кластер.Соединения();
	
	Утверждения.ПроверитьБольше(Соединения.Количество(), 0, "Не удалось получить список соединений");

КонецПроцедуры // ТестДолжен_ПолучитьСписокСоединенийКластера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокБлокировокКластера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "Блокировки.Список");
	
	Блокировки = Кластер.Блокировки();
	
	Утверждения.ПроверитьБольше(Блокировки.Количество(), 0, "Не удалось получить список блокировок");

КонецПроцедуры // ТестДолжен_ПолучитьСписокБлокировокКластера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокСервисовКластера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "Сервисы.Список");
	
	Сервисы = Кластер.Сервисы();
	
	Утверждения.ПроверитьБольше(Сервисы.Количество(), 0, "Не удалось получить список сервисов");

КонецПроцедуры // ТестДолжен_ПолучитьСписокСервисовКластера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокНазначенийФункциональностиСервера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "Серверы.Список");
	
	Серверы = Кластер.Серверы().Список();

	Для Каждого Сервер Из Серверы Цикл
		ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                        "Серверы.Параметры");
	
		ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                        "НазначенияФункциональности.Список");
	
		НазначенияФункциональности = Сервер.НазначенияФункциональности();
		Прервать;
	КонецЦикла;

	Утверждения.ПроверитьБольше(НазначенияФункциональности.Количество(),
	                            0,
	                            "Не удалось получить список назначений функциональности");
	
КонецПроцедуры // ТестДолжен_ПолучитьСписокНазначенийФункциональностиСервера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьПараметрыНазначенияФункциональностиСервера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "Серверы.Список");
	
	Серверы = Кластер.Серверы().Список();

	Для Каждого Сервер Из Серверы Цикл
		ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                        "Серверы.Параметры");
	
		ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                        "НазначенияФункциональности.Параметры");
	
		НазначенияФункциональности = Сервер.НазначенияФункциональности().Список();
		Прервать;
	КонецЦикла;

	НазначениеФункциональности = НазначенияФункциональности[0];

	ИмяИБ = НазначениеФункциональности.Получить("ИмяИБ");
	ТипОбъекта = НазначениеФункциональности.Получить("ТипОбъекта");
	ТипНазначения = НазначениеФункциональности.Получить("ТипНазначения");

	Утверждения.ПроверитьРавенство(ИмяИБ, "DEV_User1_TRADE_Cust1", "Ошибка проверки имени ИБ назначения функциональности");
	Утверждения.ПроверитьРавенство(ТипОбъекта
	                            , """" + Перечисления.ОбъектыНазначенияФункциональности.КлиентскиеСоединения + """"
	                            , "Ошибка проверки типа объекта назначения функциональности");
	Утверждения.ПроверитьРавенство(ТипНазначения
	                            , Перечисления.ТипыНазначенияФункциональности.Назначать
	                            , "Ошибка проверки типа назначения функциональности");
	
КонецПроцедуры // ТестДолжен_ПолучитьПараметрыНазначенияФункциональностиСервера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокПрофилейБезопасностиКластера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "ПрофилиБезопасности.Список");
	
	Профили = Кластер.ПрофилиБезопасности();
	
	Утверждения.ПроверитьБольше(Профили.Количество(), 0, "Не удалось получить список профилей безопасности");

КонецПроцедуры // ТестДолжен_ПолучитьСписокПрофилейБезопасностиКластера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьПараметрыПрофиляБезопасностиКластера() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "ПрофилиБезопасности.Список");
	
	Профили = Кластер.ПрофилиБезопасности();
	
	Профиль = Профили.Получить("ОсновнойПрофиль");

	Имя = Профиль.Получить("Имя");
	ДоступКаталоги = Профиль.Получить("ДоступКаталоги");
	Конфигуратор = Профиль.Получить("Конфигуратор");

	Утверждения.ПроверитьРавенство(Имя, "ОсновнойПрофиль", "Ошибка проверки имени профиля безопасности");
	Утверждения.ПроверитьРавенство(ДоступКаталоги
	                            , Перечисления.РежимыДоступа.Список
	                            , "Ошибка проверки режима доступа к каталогам");
	Утверждения.ПроверитьРавенство(Конфигуратор
	                            , Перечисления.ДаНет.Нет
	                            , "Ошибка проверки разрешения доступа к конфигуратору");

КонецПроцедуры // ТестДолжен_ПолучитьПараметрыПрофиляБезопасностиКластера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокКаталоговПрофиля() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "ПрофилиБезопасности.Список");
	
	Профили = Кластер.ПрофилиБезопасности().Список(, Истина);
	
	Для Каждого Профиль Из Профили Цикл
		ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                        "ПрофилиБезопасности.Каталоги.Список");
	
		Каталоги = Профиль.Каталоги();
		Прервать;
	КонецЦикла;
	
	Утверждения.ПроверитьБольше(Каталоги.Количество(),
	                            0,
	                            "Не удалось получить список каталогов профилей безопасности");

КонецПроцедуры // ТестДолжен_ПолучитьСписокКаталоговПрофиля()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокCOMКлассовПрофиля() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "ПрофилиБезопасности.Список");
	
	Профили = Кластер.ПрофилиБезопасности().Список(, Истина);
	
	Для Каждого Профиль Из Профили Цикл
		ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                        "ПрофилиБезопасности.COMКлассы.Список");
	
		COMКлассы = Профиль.COMКлассы();
		Прервать;
	КонецЦикла;
	
	Утверждения.ПроверитьБольше(COMКлассы.Количество(),
	                            0,
	                            "Не удалось получить список COM-классов профилей безопасности");

КонецПроцедуры // ТестДолжен_ПолучитьСписокCOMКлассовПрофиля()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокКомпонентПрофиля() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "ПрофилиБезопасности.Список");
	
	Профили = Кластер.ПрофилиБезопасности().Список(, Истина);
	
	Для Каждого Профиль Из Профили Цикл
		ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                        "ПрофилиБезопасности.Компоненты.Список");
	
		ВнешниеКомпоненты = Профиль.ВнешниеКомпоненты().Список();
		Прервать;
	КонецЦикла;
	
	Утверждения.ПроверитьБольше(ВнешниеКомпоненты.Количество(),
	                            0,
	                            "Не удалось получить список внешних компонент профилей безопасности");

КонецПроцедуры // ТестДолжен_ПолучитьСписокКомпонентПрофиля()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокМодулейПрофиля() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "ПрофилиБезопасности.Список");
	
	Профили = Кластер.ПрофилиБезопасности().Список(, Истина);
	
	Для Каждого Профиль Из Профили Цикл
		ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                        "ПрофилиБезопасности.Модули.Список");
	
		ВнешниеМодули = Профиль.ВнешниеМодули();
		Прервать;
	КонецЦикла;
	
	Утверждения.ПроверитьБольше(ВнешниеМодули.Количество(),
	                            0,
	                            "Не удалось получить список внешних модулей профилей безопасности");

КонецПроцедуры // ТестДолжен_ПолучитьСписокМодулейПрофиля()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокПриложенийПрофиля() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "ПрофилиБезопасности.Список");
	
	Профили = Кластер.ПрофилиБезопасности().Список(, Истина);
	
	Для Каждого Профиль Из Профили Цикл
		ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                        "ПрофилиБезопасности.Приложения.Список");
	
		Приложения = Профиль.Приложения();
		Прервать;
	КонецЦикла;
	
	Утверждения.ПроверитьБольше(Приложения.Количество(),
	                            0,
	                            "Не удалось получить список приложений профилей безопасности");

КонецПроцедуры // ТестДолжен_ПолучитьСписокПриложенийПрофиля()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокИнтернетРесурсовПрофиля() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "ПрофилиБезопасности.Список");
	
	Профили = Кластер.ПрофилиБезопасности().Список(, Истина);
	
	Для Каждого Профиль Из Профили Цикл
		ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                        "ПрофилиБезопасности.ИнтернетРесурсы.Список");
	
		ИнтернетРесурсы = Профиль.ИнтернетРесурсы();
		Прервать;
	КонецЦикла;
	
	Утверждения.ПроверитьБольше(ИнтернетРесурсы.Количество(),
	                            0,
	                            "Не удалось получить список интернет ресурсов профилей безопасности");

КонецПроцедуры // ТестДолжен_ПолучитьСписокИнтернетРесурсовПрофиля()

Процедура ТестДолжен_ПолучитьСписокСчетчиковРесурсов() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();    
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);
	
	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                    ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "СчетчикиРесурсов.Список");
	
	СчетчикиРесурсов = Кластер.СчетчикиРесурсов().Список();
	
	Утверждения.ПроверитьБольше(СчетчикиРесурсов.Количество(),
								0,
								"Не удалось получить список счетчиков потребления ресурсов");
	
КонецПроцедуры // ТестДолжен_ПолучитьСписокСчетчиковРесурсов()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьПараметрыСчетчиковРесурсов() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                    ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "СчетчикиРесурсов.Список");
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "СчетчикиРесурсов.Параметры");
	
	СчетчикиРесурсов = Кластер.СчетчикиРесурсов();

	Счетчик = СчетчикиРесурсов.Получить("CounterAll");

	ИмяСчетчика = Счетчик.Получить("Имя");
	ДлительностьСбора = Счетчик.Получить("ДлительностьСбора");
	ПотреблениеПамяти = Счетчик.Получить("ПотреблениеПамяти");

	Утверждения.ПроверитьРавенство(ИмяСчетчика, "CounterAll", "Ошибка проверки имени счетчика потребления ресурсов");
	Утверждения.ПроверитьРавенство(ДлительностьСбора,
								   3600000,
								   "Ошибка проверки длительности сбора счетчика потребления ресурсов");
	Утверждения.ПроверитьРавенство(ПотреблениеПамяти,
								   "analyze",
								   "Ошибка проверки анализа потребления памяти счетчика потребления ресурсов");

КонецПроцедуры // ТестДолжен_ПолучитьПараметрыСчетчиковРесурсов()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьЗначенияСчетчикаРесурсов() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                    ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "СчетчикиРесурсов.Список");
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "СчетчикиРесурсов.Параметры");
	
	СчетчикиРесурсов = Кластер.СчетчикиРесурсов();

	Счетчик = СчетчикиРесурсов.Получить("CounterAll");

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                    "СчетчикиРесурсов.Значения.Список");
	
	Счетчик.ОбновитьДанные(Перечисления.РежимыОбновленияДанных.Принудительно);

	ЗначенияСчетчика = Счетчик.Значения();

	Утверждения.ПроверитьБольше(ЗначенияСчетчика.Количество(),
								0,
								"Не удалось получить значения счетчика потребления ресурсов");
	
КонецПроцедуры // ТестДолжен_ПолучитьЗначенияСчетчикаРесурсов()

Процедура ТестДолжен_ПолучитьСписокОграниченийРесурсов() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();    
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);
	
	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                 ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "ОграниченияРесурсов.Список");
	
	ОграниченияРесурсов = Кластер.ОграниченияРесурсов().Список();
	
	Утверждения.ПроверитьБольше(ОграниченияРесурсов.Количество(),
								0,
								"Не удалось получить список ограничений потребления ресурсов");
	
КонецПроцедуры // ТестДолжен_ПолучитьСписокОграниченийРесурсов()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьПараметрыОграниченийРесурсов() Экспорт
	
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), "Кластеры.Список");
	
	Кластеры = АгентКластера.Кластеры();
	
	Кластер = Кластеры.Получить(ПараметрыТестирования.Параметры().Кластер_АдресПорт);

	Кластер.УстановитьАдминистратора(ПараметрыТестирования.Параметры().Кластер_Администратор,
	                                    ПараметрыТестирования.Параметры().Кластер_Пароль);

	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "ОграниченияРесурсов.Список");
	ПараметрыТестирования.УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(),
	                                                       "ОграниченияРесурсов.Параметры");
	
	ОграниченияРесурсов = Кластер.ОграниченияРесурсов();

	Ограничение = ОграниченияРесурсов.Получить("ResourceLimit1");

	ИмяОграничения = Ограничение.Получить("Имя");
	ДлительностьСерверныхВызовов = Ограничение.Получить("ДлительностьСерверныхВызовов");
	ПотреблениеПамяти = Ограничение.Получить("ПотреблениеПамяти");

	Утверждения.ПроверитьРавенство(ИмяОграничения,
								   "ResourceLimit1",
								   "Ошибка проверки имени ограничения потребления ресурсов");
	Утверждения.ПроверитьРавенство(ДлительностьСерверныхВызовов,
	                               10000,
	                               "Ошибка проверки длительности серверных вызовов ограничения потребления ресурсов");
	Утверждения.ПроверитьРавенство(ПотреблениеПамяти,
	                               640000000,
	                               "Ошибка проверки потребления памяти ограничения потребления ресурсов");

КонецПроцедуры // ТестДолжен_ПолучитьПараметрыОграниченийРесурсов()
