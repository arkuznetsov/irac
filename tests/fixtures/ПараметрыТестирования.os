// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/irac/
// ----------------------------------------------------------

Перем Кластер_Агент;
Перем ПараметрыКластера;
Перем ПараметрыТестирования;
Перем ВозвращаемыеЗначения;
Перем Лог;

Процедура УстановитьАгентКластера(АгентКластера) Экспорт

	Кластер_Агент = АгентКластера;

КонецПроцедуры // УстановитьАгентКластера()

Функция АгентКластера(АгентКластера) Экспорт

	Возврат Кластер_Агент;
	
КонецФункции // АгентКластера()

// Процедура устанавливает вывод функции ВыполнитьКоманду мок-исполнителя команд
//
// Параметры:
//    ИсполнительКоманд    - МокИсполнительКоманд        - мок-объект исполнитель команд
//    ПутьКДанным          - Строка                    - Путь к параметрам в структуре параметров кластера
//    
Процедура УстановитьВыводИсполнителяКоманд(ИсполнительКоманд, ПутьКДанным) Экспорт

	Если ТипЗнч(ИсполнительКоманд) = Тип("ИсполнительКоманд") Тогда
		Возврат;
	КонецЕсли;

	МассивПутей = СтрРазделить(ПутьКДанным, ".");

	Данные = ПараметрыКластера;

	Для Каждого ТекПуть Из МассивПутей Цикл
		Данные = Данные[ТекПуть];
	КонецЦикла;

	ДанныеДляОбработки = Новый Массив();
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		ДанныеДляОбработки = Данные;
	Иначе
		ДанныеДляОбработки.Добавить(Данные);
	КонецЕсли;

	Для Каждого ТекДанные Из ДанныеДляОбработки Цикл
		ИсполнительКоманд.Когда().ВыполнитьКоманду(ТекДанные.ПараметрыКоманды).ТогдаВозвращает(ТекДанные.ВыводКоманды);
	КонецЦикла;

	ИсполнительКоманд.Когда().КодВозврата().ТогдаВозвращает(0);

КонецПроцедуры // УстановитьВыводИсполнителяКомандНов()

Функция Агент_СтрокаПодключения()

	Возврат Параметры().Агент_Адрес + ":" + Параметры().Агент_Порт;

КонецФункции // Агент_СтрокаПодключения()

Функция Кластер_Ид()

	Кластеры = РазобратьВыводКоманды(ВозвращаемыеЗначения["Кластеры"]);

	Возврат Кластеры[0]["cluster"];

КонецФункции // Кластер_Ид()

Функция Агент_ПараметрыАвторизации()

	Если НЕ Параметры().Свойство("Агент_Администратор") Тогда
		Возврат "";
	КонецЕсли;

	Если ПустаяСтрока(Параметры().Агент_Администратор) Тогда
		Возврат "";
	КонецЕсли;

	ПараметрыАвторизации = Служебный.ПараметрыАвторизации(Перечисления.РежимыАдминистрирования.Агенты);
	ПараметрыАвторизации.Вставить("Администратор", Параметры().Агент_Администратор);
	
	Если Не ПустаяСтрока(Параметры().Агент_Пароль) Тогда
		ПараметрыАвторизации.Вставить("Пароль", Параметры().Агент_Пароль);
	КонецЕсли;

	Возврат ПараметрыАвторизации;

КонецФункции // Агент_ПараметрыАвторизации()

Функция Кластер_ПараметрыАвторизации()

	Если НЕ Параметры().Свойство("Кластер_Администратор") Тогда
		Возврат "";
	КонецЕсли;

	Если ПустаяСтрока(Параметры().Кластер_Администратор) Тогда
		Возврат "";
	КонецЕсли;

	ПараметрыАвторизации = Служебный.ПараметрыАвторизации(Перечисления.РежимыАдминистрирования.Кластеры);
	ПараметрыАвторизации.Вставить("Администратор", Параметры().Кластер_Администратор);
	
	Если Не ПустаяСтрока(Параметры().Кластер_Пароль) Тогда
		ПараметрыАвторизации.Вставить("Пароль", Параметры().Кластер_Пароль);
	КонецЕсли;

	Возврат ПараметрыАвторизации;

КонецФункции // Кластер_ПараметрыАвторизации()

Функция Сервер_Ид()

	Серверы = РазобратьВыводКоманды(ВозвращаемыеЗначения["Серверы"]);

	Возврат Серверы[0]["server"];

КонецФункции // Сервер_Ид()

Функция ПрофильБезопасности_Имя()

	Профиль = РазобратьВыводКоманды(ВозвращаемыеЗначения["ПрофилиБезопасности"]);

	Возврат Профиль[0]["name"];

КонецФункции // ПрофильБезопасности_Имя()

Функция ИБ_ПараметрыАвторизации()

	Если НЕ Параметры().Свойство("ИБ_Администратор") Тогда
		Возврат "";
	КонецЕсли;

	Если ПустаяСтрока(Параметры().ИБ_Администратор) Тогда
		Возврат "";
	КонецЕсли;

	ПараметрыАвторизации = Служебный.ПараметрыАвторизации(Перечисления.РежимыАдминистрирования.ИнформационныеБазы);
	ПараметрыАвторизации.Вставить("Администратор", Параметры().ИБ_Администратор);
	
	Если Не ПустаяСтрока(Параметры().ИБ_Пароль) Тогда
		ПараметрыАвторизации.Вставить("Пароль", Параметры().ИБ_Пароль);
	КонецЕсли;

	Возврат ПараметрыАвторизации;

КонецФункции // ИБ_ПараметрыАвторизации()

Функция Вывод_АдминистраторыСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"   , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииАгента", Агент_ПараметрыАвторизации());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.АдминистраторыАгента,
	                                        ПараметрыКоманды);

	ВыводКоманды = ВозвращаемыеЗначения["Администраторы"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_АдминистраторыСписок()

Функция Вывод_АдминистраторыСписокПослеДобавления()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"   , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииАгента", Агент_ПараметрыАвторизации());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.АдминистраторыАгента,
	                                        ПараметрыКоманды);

	ВыводКоманды = ВозвращаемыеЗначения["Администраторы"] + ВозвращаемыеЗначения["Администраторы.Добавление"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_АдминистраторыСписокПослеДобавления()

Функция Вывод_КластерыСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"  , Агент_СтрокаПодключения());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент,
	                                        Перечисления.РежимыАдминистрирования.Кластеры,
	                                        ПараметрыКоманды);

	ВыводКоманды = ВозвращаемыеЗначения["Кластеры"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_КластерыСписок()

Функция Вывод_КластерыПараметры()
	
	Результат = Новый Массив();

	Кластеры = РазобратьВыводКоманды(ВозвращаемыеЗначения["Кластеры"]);

	Для Каждого ТекКластер Из Кластеры Цикл

		ПараметрыКоманды = Новый Соответствие();
		ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"   , Агент_СтрокаПодключения());
		ПараметрыКоманды.Вставить("ИдентификаторКластера"     , ТекКластер["cluster"]);
	
		ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент,
	                                            Перечисления.РежимыАдминистрирования.Кластеры,
	                                            ПараметрыКоманды);
	        
		ВыводКоманды = ТекКластер["ТекстОбъекта"];

		Результат.Добавить(Новый Структура("ПараметрыКоманды, ВыводКоманды",
	                                       ПараметрыОбъекта.ПараметрыКоманды("Описание"),
	                                       ВыводКоманды));

	КонецЦикла;

	Возврат Результат;

КонецФункции // Вывод_КластерыПараметры()

Функция Вывод_КластерыАдминистраторыСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.АдминистраторыКластера,
	                                        ПараметрыКоманды);

	ВыводКоманды = ВозвращаемыеЗначения["Кластеры.Администраторы"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_КластерыАдминистраторыСписок()

Функция Вывод_КластерыАдминистраторыСписокПослеДобавления()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.АдминистраторыКластера,
	                                        ПараметрыКоманды);

	ВыводКоманды = ВозвращаемыеЗначения["Кластеры.Администраторы"]
	             + ВозвращаемыеЗначения["Кластеры.Администраторы.Добавление"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_КластерыАдминистраторыСписокПослеДобавления()

Функция Вывод_МенеджерыСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент,
	                                        Перечисления.РежимыАдминистрирования.МенеджерыКластера,
	                                        ПараметрыКоманды);

	ВыводКоманды = ВозвращаемыеЗначения["Менеджеры"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_МенеджерыСписок()

Функция Вывод_МенеджерыПараметры()
	
	Результат = Новый Массив();

	Менеджеры = РазобратьВыводКоманды(ВозвращаемыеЗначения["Менеджеры"]);

	Для Каждого ТекМенеджер Из Менеджеры Цикл

		ПараметрыКоманды = Новый Соответствие();
		ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
		ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
		ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
		ПараметрыКоманды.Вставить("ИдентификаторМенеджера"      , ТекМенеджер["manager"]);
	    
		ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент,
		                                        Перечисления.РежимыАдминистрирования.МенеджерыКластера,
		                                        ПараметрыКоманды);

		ВыводКоманды = ТекМенеджер["ТекстОбъекта"];

		Результат.Добавить(Новый Структура("ПараметрыКоманды, ВыводКоманды",
	                                       ПараметрыОбъекта.ПараметрыКоманды("Описание"),
	                                       ВыводКоманды));

	КонецЦикла;

	Возврат Результат;

КонецФункции // Вывод_МенеджерыПараметры()

Функция Вывод_СерверыСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.Серверы, ПараметрыКоманды);

	ВыводКоманды = ВозвращаемыеЗначения["Серверы"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_СерверыСписок()

Функция Вывод_СерверыПараметры()
	
	Результат = Новый Массив();

	Серверы = РазобратьВыводКоманды(ВозвращаемыеЗначения["Серверы"]);

	Для Каждого ТекСервер Из Серверы Цикл

		ПараметрыКоманды = Новый Соответствие();
		ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
		ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
		ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
		ПараметрыКоманды.Вставить("ИдентификаторСервера"        , ТекСервер["server"]);
	    
		ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент,
	                                            Перечисления.РежимыАдминистрирования.Серверы,
	                                            ПараметрыКоманды);

		ВыводКоманды = ТекСервер["ТекстОбъекта"];

		Результат.Добавить(Новый Структура("ПараметрыКоманды, ВыводКоманды",
	                                       ПараметрыОбъекта.ПараметрыКоманды("Описание"),
	                                       ВыводКоманды));

	КонецЦикла;

	Возврат Результат;

КонецФункции // Вывод_СерверыПараметры()

Функция Вывод_СерверыСписокПослеДобавления()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.Серверы, ПараметрыКоманды);

	ВыводКоманды = "";

	ВыводКоманды = ВозвращаемыеЗначения["Серверы"] +
	               ВозвращаемыеЗначения["Серверы.Добавление"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_СерверыСписокПослеДобавления()

Функция Вывод_СерверыДобавить()
	
	Серверы = РазобратьВыводКоманды(ВозвращаемыеЗначения["Серверы.Добавление"]);

	Имя         = Серверы[0].Получить("name");
	АдресАгента = Серверы[0].Получить("agent-host");
	ПортАгента  = Серверы[0].Получить("agent-port");

	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыКоманды.Вставить("Имя"                      , Имя);
	ПараметрыКоманды.Вставить("АдресАгента"              , АдресАгента);
	ПараметрыКоманды.Вставить("ПортАгента"               , ПортАгента);

	ПараметрыКоманды.Вставить("ДиапазонПортов"                       , Серверы[0].Получить("port-range"));
	ПараметрыКоманды.Вставить("ЦентральныйСервер"                    , Серверы[0].Получить("using"));
	ПараметрыКоманды.Вставить("МенеджерПодКаждыйСервис"              , Серверы[0].Получить("dedicate-managers"));
	ПараметрыКоманды.Вставить("КоличествоИБНаПроцесс"                , Серверы[0].Получить("infobases-limit"));
	ПараметрыКоманды.Вставить("МаксОбъемПамятиРабочихПроцессов"      , Серверы[0].Получить("memory-limit"));
	ПараметрыКоманды.Вставить("КоличествоСоединенийНаПроцесс"        , Серверы[0].Получить("connections-limit"));
	ПараметрыКоманды.Вставить("ПортГлавногоМенеджераКластера"        , Серверы[0].Получить("cluster-port"));
	ПараметрыКоманды.Вставить("БезопасныйОбъемПамятиРабочихПроцессов",
	                          Серверы[0].Получить("safe-working-processes-memory-limit"));
	ПараметрыКоманды.Вставить("БезопасныйРасходПамятиЗаОдинВызов"    , Серверы[0].Получить("safe-call-memory-limit"));

	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.Серверы, ПараметрыКоманды);

	ВремТекст = Новый ТекстовыйДокумент();
	ВремТекст.УстановитьТекст(ВозвращаемыеЗначения["Серверы.Добавление"]);
	ВыводКоманды = ВремТекст.ПолучитьСтроку(1);

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Добавить"), ВыводКоманды);

КонецФункции // Вывод_ИБДобавить()

Функция Вывод_РабочиеПроцессыСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент,
	                                        Перечисления.РежимыАдминистрирования.РабочиеПроцессы,
	                                        ПараметрыКоманды);

	ВыводКоманды = ВозвращаемыеЗначения["РабочиеПроцессы"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_РабочиеПроцессыСписок()

Функция Вывод_РабочиеПроцессыПараметры()
	
	Результат = Новый Массив();

	Процессы = РазобратьВыводКоманды(ВозвращаемыеЗначения["РабочиеПроцессы"]);

	Для Каждого ТекПроцесс Из Процессы Цикл

		ПараметрыКоманды = Новый Соответствие();
		ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
		ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
		ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
		ПараметрыКоманды.Вставить("ИдентификаторПроцесса"       , ТекПроцесс["process"]);
	    
		ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент,
		                                        Перечисления.РежимыАдминистрирования.РабочиеПроцессы,
		                                        ПараметрыКоманды);

		ВыводКоманды = ТекПроцесс["ТекстОбъекта"];

		Результат.Добавить(Новый Структура("ПараметрыКоманды, ВыводКоманды",
	                                       ПараметрыОбъекта.ПараметрыКоманды("Описание"),
	                                       ВыводКоманды));

	КонецЦикла;

	Возврат Результат;

КонецФункции // Вывод_РабочиеПроцессыПараметры()

Функция Вывод_РабочиеПроцессыСписокЛицензии()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.ЛицензииПроцессов,
	                                        ПараметрыКоманды);

	ВыводКоманды = ВозвращаемыеЗначения["РабочиеПроцессы.Лицензии"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_РабочиеПроцессыСписокЛицензии()

Функция Вывод_РабочиеПроцессыПараметрыЛицензии()
	
	Результат = Новый Массив();

	ПроцессыЛицензии = РазобратьВыводКоманды(ВозвращаемыеЗначения["РабочиеПроцессы.Лицензии"]);

	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());

	Для Каждого ТекПроцесс Из ПроцессыЛицензии Цикл

		ПараметрыКоманды.Вставить("ИдентификаторПроцесса"    , ТекПроцесс["process"]);
	
		ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.ЛицензииПроцессов,
		                                        ПараметрыКоманды);

		ВыводКоманды = ТекПроцесс["ТекстОбъекта"];
		
		Результат.Добавить(Новый Структура("ПараметрыКоманды, ВыводКоманды",
										   ПараметрыОбъекта.ПараметрыКоманды("Описание"),
										   ВыводКоманды));
	
	КонецЦикла;

	Возврат Результат;

КонецФункции // Вывод_РабочиеПроцессыПараметрыЛицензии()

Функция СокращенныйТекстОписанияИБ(ТекстОписания)

	КоличествоПроверяемыхСимволовИмени = 4;

	ВыводКоманды = "";

	Текст = Новый ТекстовыйДокумент();
	Текст.УстановитьТекст(ТекстОписания);

	Для й = 1 По Текст.КоличествоСтрок() Цикл
		ТекстСтроки = Текст.ПолучитьСтроку(й);
		ИмяПоля = Лев(ТекстСтроки, КоличествоПроверяемыхСимволовИмени);

		Если НЕ (ИмяПоля = "name" ИЛИ ИмяПоля = "info" ИЛИ ИмяПоля = "desc") Тогда
			Продолжить;
		КонецЕсли;

		ВыводКоманды = ВыводКоманды + ТекстСтроки + Символы.ПС;
	КонецЦикла;

	Возврат ВыводКоманды + Символы.ПС;

КонецФункции // СокращенныйТекстОписанияИБ()

Функция Вывод_ИБСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент,
	                                        Перечисления.РежимыАдминистрирования.ИнформационныеБазы,
	                                        ПараметрыКоманды);

	ВыводКоманды = "";

	ИБ = РазобратьВыводКоманды(ВозвращаемыеЗначения["ИнформационныеБазы"]);

	Для Каждого ТекИб Из ИБ Цикл

		ВыводКоманды = ВыводКоманды + СокращенныйТекстОписанияИБ(ТекИБ["ТекстОбъекта"]);
	    
	КонецЦикла;

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_ИБСписок()

Функция Вывод_ИБСокращенныеПараметры()
	
	Результат = Новый Массив();

	ИБ = РазобратьВыводКоманды(ВозвращаемыеЗначения["ИнформационныеБазы"]);

	Для Каждого ТекИб Из ИБ Цикл

		ПараметрыКоманды = Новый Соответствие();
		ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
		ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
		ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
		ПараметрыКоманды.Вставить("ИдентификаторИБ"             , ТекИБ["infobase"]);
	
		ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.ИнформационныеБазы,
		                                        ПараметрыКоманды);
	        
		ВыводКоманды = СокращенныйТекстОписанияИБ(ТекИБ["ТекстОбъекта"]);

		Результат.Добавить(Новый Структура("ПараметрыКоманды, ВыводКоманды",
	                                       ПараметрыОбъекта.ПараметрыКоманды("Описание"),
	                                       ВыводКоманды));

	КонецЦикла;

	Возврат Результат;

КонецФункции // Вывод_ИБСокращенныеПараметры()

Функция Вывод_ИБПолныеПараметры()
	
	Результат = Новый Массив();

	ИБ = РазобратьВыводКоманды(ВозвращаемыеЗначения["ИнформационныеБазы"]);

	Для Каждого ТекИб Из ИБ Цикл

		ПараметрыКоманды = Новый Соответствие();
		ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
		ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
		ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
		ПараметрыКоманды.Вставить("ИдентификаторИБ"             , ТекИБ["infobase"]);
		ПараметрыКоманды.Вставить("ПараметрыАвторизацииИБ"      , ИБ_ПараметрыАвторизации());
	
		ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.ИнформационныеБазы,
		                                        ПараметрыКоманды);
	        
		ВыводКоманды = ТекИБ["ТекстОбъекта"];

		Результат.Добавить(Новый Структура("ПараметрыКоманды, ВыводКоманды",
	                                       ПараметрыОбъекта.ПараметрыКоманды("ПолноеОписание"),
	                                       ВыводКоманды));

	КонецЦикла;

	Возврат Результат;

КонецФункции // Вывод_ИБПолныеПараметры()

Функция Вывод_ИБНедостаточноПрав()
	
	Результат = Новый Массив();

	ИБ = РазобратьВыводКоманды(ВозвращаемыеЗначения["ИнформационныеБазы"]);

	Для Каждого ТекИб Из ИБ Цикл

		ПараметрыКоманды = Новый Соответствие();
		ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
		ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
		ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
		ПараметрыКоманды.Вставить("ИдентификаторИБ"             , ТекИБ["infobase"]);
		ПараметрыКоманды.Вставить("ПараметрыАвторизацииИБ"      , "");
	
		ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.ИнформационныеБазы,
		                                        ПараметрыКоманды);
	        
		ВыводКоманды = СтрШаблон("Недостаточно прав пользователя для доступа к базе %1", ТекИБ["name"]);
	
		Результат.Добавить(Новый Структура("ПараметрыКоманды, ВыводКоманды",
	                                       ПараметрыОбъекта.ПараметрыКоманды("ПолноеОписание"),
	                                       ВыводКоманды));

	КонецЦикла;

	Возврат Результат;

КонецФункции // Вывод_ИБНедостаточноПрав()

Функция Вывод_ИБСписокПослеДобавления()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.ИнформационныеБазы,
	                                        ПараметрыКоманды);

	ВыводКоманды = "";

	ИБ = РазобратьВыводКоманды(ВозвращаемыеЗначения["ИнформационныеБазы"] +
	                           ВозвращаемыеЗначения["ИнформационныеБазы.Добавление"]);

	Для Каждого ТекИб Из ИБ Цикл

		ВыводКоманды = ВыводКоманды + СокращенныйТекстОписанияИБ(ТекИБ["ТекстОбъекта"]);
	    
	КонецЦикла;

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_ИБСписокПослеДобавления()

Функция Вывод_ИБДобавить()
	
	Имя             = Параметры().НоваяИБ_Имя;
	СоздатьБазуСУБД = Истина;
	Локализация     = "ru_RU";

	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыКоманды.Вставить("Имя"            , Имя);
	ПараметрыКоманды.Вставить("Локализация"    , Локализация);
	ПараметрыКоманды.Вставить("СоздатьБазуСУБД", СоздатьБазуСУБД);

	ПараметрыКоманды.Вставить("ТипСУБД"                              , Перечисления.ТипыСУБД.MSSQLServer);
	ПараметрыКоманды.Вставить("АдресСервераСУБД"                     , "localhost");
	ПараметрыКоманды.Вставить("ИмяБазыСУБД"                          , Имя);
	ПараметрыКоманды.Вставить("ИмяПользователяБазыСУБД"              , "_1CSrvUsr1");
	ПараметрыКоманды.Вставить("ПарольПользователяБазыСУБД"           , "q2w3e4r5");
	ПараметрыКоманды.Вставить("БлокировкаРегламентныхЗаданийВключена", Перечисления.СостоянияВыключателя.Выключено);
	ПараметрыКоманды.Вставить("ВыдачаЛицензийСервером"               , Перечисления.ПраваДоступа.Разрешено);

	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент,
	                                        Перечисления.РежимыАдминистрирования.ИнформационныеБазы,
	                                        ПараметрыКоманды);

	ВремТекст = Новый ТекстовыйДокумент();
	ВремТекст.УстановитьТекст(ВозвращаемыеЗначения["ИнформационныеБазы.Добавление"]);
	ВыводКоманды = ВремТекст.ПолучитьСтроку(1);

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Добавить"), ВыводКоманды);

КонецФункции // Вывод_ИБДобавить()

Функция Вывод_СеансыСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.Сеансы, ПараметрыКоманды);

	ВыводКоманды = "";

	Сеансы = РазобратьВыводКоманды(ВозвращаемыеЗначения["Сеансы"]);

	Для Каждого ТекСеанс Из Сеансы Цикл

		ВыводКоманды = ВыводКоманды + ТекСеанс["ТекстОбъекта"];
	    
	КонецЦикла;

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_СеансыСписок()

Функция Вывод_СеансыПараметры()
	
	Результат = Новый Массив();

	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());

	Сеансы = РазобратьВыводКоманды(ВозвращаемыеЗначения["Сеансы"]);

	Для Каждого ТекСеанс Из Сеансы Цикл

		ПараметрыКоманды.Вставить("ИдентификаторСеанса"      , ТекСеанс["session"]);
	
		ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.Сеансы, ПараметрыКоманды);
	        
		ВыводКоманды = ТекСеанс["ТекстОбъекта"];

		Результат.Добавить(Новый Структура("ПараметрыКоманды, ВыводКоманды",
	                                       ПараметрыОбъекта.ПараметрыКоманды("Описание"),
	                                       ВыводКоманды));

	КонецЦикла;

	Возврат Результат;

КонецФункции // Вывод_СеансыПараметры()

Функция Вывод_СеансыСписокЛицензии()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.ЛицензииСеансов,
	                                        ПараметрыКоманды);

	ВыводКоманды = ВозвращаемыеЗначения["Сеансы.Лицензии"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_СеансыСписокЛицензии()

Функция Вывод_СеансыПараметрыЛицензии()
	
	Результат = Новый Массив();

	СеансыЛицензии = РазобратьВыводКоманды(ВозвращаемыеЗначения["Сеансы.Лицензии"]);

	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());

	Для Каждого ТекСеанс Из СеансыЛицензии Цикл

		ПараметрыКоманды.Вставить("ИдентификаторСеанса"      , ТекСеанс["session"]);
	
		ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.ЛицензииСеансов,
		                                        ПараметрыКоманды);

		ВыводКоманды = ТекСеанс["ТекстОбъекта"];
		
		Результат.Добавить(Новый Структура("ПараметрыКоманды, ВыводКоманды",
										   ПараметрыОбъекта.ПараметрыКоманды("Описание"),
										   ВыводКоманды));
	
	КонецЦикла;

	Возврат Результат;

КонецФункции // Вывод_СеансыПараметрыЛицензии()

Функция Вывод_СоединенияСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент,
	                                        Перечисления.РежимыАдминистрирования.Соединения,
	                                        ПараметрыКоманды);

	ВыводКоманды = "";

	Соединения = РазобратьВыводКоманды(ВозвращаемыеЗначения["Соединения"]);

	Для Каждого ТекСоединение Из Соединения Цикл

		ВыводКоманды = ВыводКоманды + ТекСоединение["ТекстОбъекта"];
	    
	КонецЦикла;

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_СоединенияСписок()

Функция Вывод_БлокировкиСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент,
	                                        Перечисления.РежимыАдминистрирования.Блокировки,
	                                        ПараметрыКоманды);

	ВыводКоманды = "";

	Блокировки = РазобратьВыводКоманды(ВозвращаемыеЗначения["Блокировки"]);

	Для Каждого ТекБлокировка Из Блокировки Цикл

		ВыводКоманды = ВыводКоманды + ТекБлокировка["ТекстОбъекта"];
	    
	КонецЦикла;

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_БлокировкиСписок()

Функция Вывод_СервисыСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.Сервисы, ПараметрыКоманды);

	ВыводКоманды = "";

	Сервисы = РазобратьВыводКоманды(ВозвращаемыеЗначения["Сервисы"]);

	Для Каждого ТекСервис Из Сервисы Цикл

		ВыводКоманды = ВыводКоманды + ТекСервис["ТекстОбъекта"];
	    
	КонецЦикла;

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_СервисыСписок()

Функция Вывод_НазначенияФункциональностиСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыКоманды.Вставить("ИдентификаторСервера"     , Сервер_Ид());

	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.НазначенияФункциональности,
	                                        ПараметрыКоманды);

	ВыводКоманды = "";

	Требования = РазобратьВыводКоманды(ВозвращаемыеЗначения["НазначенияФункциональности"]);

	Для Каждого ТекТребование Из Требования Цикл

		ВыводКоманды = ВыводКоманды + ТекТребование["ТекстОбъекта"];
	    
	КонецЦикла;

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_НазначенияФункциональностиСписок()

Функция Вывод_НазначенияФункциональностиПараметры()
	
	Назначения = РазобратьВыводКоманды(ВозвращаемыеЗначения["НазначенияФункциональности"]);

	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыКоманды.Вставить("ИдентификаторСервера"     , Сервер_Ид());
	ПараметрыКоманды.Вставить("ИдентификаторТребования"  , Назначения[0]["rule"]);

	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.НазначенияФункциональности,
	                                        ПараметрыКоманды);

	ВыводКоманды = "";

	ВыводКоманды = Назначения[0]["ТекстОбъекта"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Описание"), ВыводКоманды);

КонецФункции // Вывод_НазначенияФункциональностиПараметры()

Функция Вывод_ПрофилиБезопасностиСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.ПрофилиБезопасности,
	                                        ПараметрыКоманды);

	ВыводКоманды = "";

	Профили = РазобратьВыводКоманды(ВозвращаемыеЗначения["ПрофилиБезопасности"]);

	Для Каждого ТекПрофиль Из Профили Цикл

		ВыводКоманды = ВыводКоманды + ТекПрофиль["ТекстОбъекта"];
	    
	КонецЦикла;

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_ПрофилиБезопасностиСписок()

Функция Вывод_ПрофилиБезопасностиКаталогиСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	ПараметрыКоманды.Вставить("ИмяПрофиля"                  , ПрофильБезопасности_Имя());
	ПараметрыКоманды.Вставить("ВидОбъектовПрофиля",
	                          Перечисления.ВидыОбъектовПрофиляБезопасности.Каталог);
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.КаталогиПрофиля,
	                                        ПараметрыКоманды);

	ВыводКоманды = "";

	ОбъектыПрофиля = РазобратьВыводКоманды(ВозвращаемыеЗначения["ПрофилиБезопасности.Каталоги"]);

	Для Каждого ТекОбъект Из ОбъектыПрофиля Цикл

		ВыводКоманды = ВыводКоманды + ТекОбъект["ТекстОбъекта"];
	    
	КонецЦикла;

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_ПрофилиБезопасностиКаталогиСписок()

Функция Вывод_ПрофилиБезопасностиCOMКлассыСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	ПараметрыКоманды.Вставить("ИмяПрофиля"                  , ПрофильБезопасности_Имя());
	ПараметрыКоманды.Вставить("ВидОбъектовПрофиля",
	                          Перечисления.ВидыОбъектовПрофиляБезопасности.COMКласс);
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.COMКлассыПрофиля,
	                                        ПараметрыКоманды);

	ВыводКоманды = "";

	ОбъектыПрофиля = РазобратьВыводКоманды(ВозвращаемыеЗначения["ПрофилиБезопасности.COMКлассы"]);

	Для Каждого ТекОбъект Из ОбъектыПрофиля Цикл

		ВыводКоманды = ВыводКоманды + ТекОбъект["ТекстОбъекта"];
	    
	КонецЦикла;

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_ПрофилиБезопасностиCOMКлассыСписок()

Функция Вывод_ПрофилиБезопасностиКомпонентыСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	ПараметрыКоманды.Вставить("ИмяПрофиля"                  , ПрофильБезопасности_Имя());
	ПараметрыКоманды.Вставить("ВидОбъектовПрофиля",
	                          Перечисления.ВидыОбъектовПрофиляБезопасности.Компонент);
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.ВнешниеКомпонентыПрофиля,
	                                        ПараметрыКоманды);

	ВыводКоманды = "";

	ОбъектыПрофиля = РазобратьВыводКоманды(ВозвращаемыеЗначения["ПрофилиБезопасности.Компоненты"]);

	Для Каждого ТекОбъект Из ОбъектыПрофиля Цикл

		ВыводКоманды = ВыводКоманды + ТекОбъект["ТекстОбъекта"];
	    
	КонецЦикла;

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_ПрофилиБезопасностиКаталогиСписок()

Функция Вывод_ПрофилиБезопасностиМодулиСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	ПараметрыКоманды.Вставить("ИмяПрофиля"                  , ПрофильБезопасности_Имя());
	ПараметрыКоманды.Вставить("ВидОбъектовПрофиля",
	                          Перечисления.ВидыОбъектовПрофиляБезопасности.Модуль);
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.МодулиПрофиля,
	                                        ПараметрыКоманды);

	ВыводКоманды = "";

	ОбъектыПрофиля = РазобратьВыводКоманды(ВозвращаемыеЗначения["ПрофилиБезопасности.Модули"]);

	Для Каждого ТекОбъект Из ОбъектыПрофиля Цикл

		ВыводКоманды = ВыводКоманды + ТекОбъект["ТекстОбъекта"];
	    
	КонецЦикла;

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_ПрофилиБезопасностиМодулиСписок()

Функция Вывод_ПрофилиБезопасностиПриложенияСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	ПараметрыКоманды.Вставить("ИмяПрофиля"                  , ПрофильБезопасности_Имя());
	ПараметрыКоманды.Вставить("ВидОбъектовПрофиля",
	                          Перечисления.ВидыОбъектовПрофиляБезопасности.Приложение);
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.ПриложенияПрофиля,
	                                        ПараметрыКоманды);

	ВыводКоманды = "";

	ОбъектыПрофиля = РазобратьВыводКоманды(ВозвращаемыеЗначения["ПрофилиБезопасности.Приложения"]);

	Для Каждого ТекОбъект Из ОбъектыПрофиля Цикл

		ВыводКоманды = ВыводКоманды + ТекОбъект["ТекстОбъекта"];
	    
	КонецЦикла;

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_ПрофилиБезопасностиПриложенияСписок()

Функция Вывод_ПрофилиБезопасностиИнтернетРесурсыСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	ПараметрыКоманды.Вставить("ИмяПрофиля"                  , ПрофильБезопасности_Имя());
	ПараметрыКоманды.Вставить("ВидОбъектовПрофиля",
	                          Перечисления.ВидыОбъектовПрофиляБезопасности.ИнтернетРесурс);
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.ИнтернетРесурсыПрофиля,
	                                        ПараметрыКоманды);

	ВыводКоманды = "";

	ОбъектыПрофиля = РазобратьВыводКоманды(ВозвращаемыеЗначения["ПрофилиБезопасности.ИнтернетРесурсы"]);

	Для Каждого ТекОбъект Из ОбъектыПрофиля Цикл

		ВыводКоманды = ВыводКоманды + ТекОбъект["ТекстОбъекта"];
	    
	КонецЦикла;

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_ПрофилиБезопасностиИнтернетРесурсыСписок()

Функция Вывод_СчетчикиРесурсовСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент,
	                                        Перечисления.РежимыАдминистрирования.СчетчикиРесурсов,
	                                        ПараметрыКоманды);

	ВыводКоманды = ВозвращаемыеЗначения["СчетчикиРесурсов"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_СчетчикиРесурсовСписок()

Функция Вывод_СчетчикиРесурсовПараметры()
	
	Результат = Новый Массив();

	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	Счетчики = РазобратьВыводКоманды(ВозвращаемыеЗначения["СчетчикиРесурсов"]);

	Для Каждого ТекСчетчик Из Счетчики Цикл

		ПараметрыКоманды.Вставить("ИмяСчетчика", ТекСчетчик["name"]);

		ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент,
		                                        Перечисления.РежимыАдминистрирования.СчетчикиРесурсов,
		                                        ПараметрыКоманды);

		ВыводКоманды = ТекСчетчик["ТекстОбъекта"];

		Результат.Добавить(Новый Структура("ПараметрыКоманды, ВыводКоманды",
	                                       ПараметрыОбъекта.ПараметрыКоманды("Описание"),
	                                       ВыводКоманды));

	КонецЦикла;

	Возврат Результат;

КонецФункции // Вывод_СчетчикиРесурсовПараметрыЗначения()

Функция Вывод_СчетчикиРесурсовПараметрыЗначения()
	
	Счетчики = РазобратьВыводКоманды(ВозвращаемыеЗначения["СчетчикиРесурсов"]);

	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыКоманды.Вставить("ИмяСчетчика", Счетчики[0]["name"]);

	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент,
	                                        Перечисления.РежимыАдминистрирования.СчетчикиРесурсов,
	                                        ПараметрыКоманды);

	ВыводКоманды = ВозвращаемыеЗначения["СчетчикиРесурсов.Значения"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Значения"), ВыводКоманды);

КонецФункции // Вывод_СчетчикиРесурсовПараметрыЗначения()

Функция Вывод_ОграниченияРесурсовСписок()
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент,
	                                        Перечисления.РежимыАдминистрирования.ОграниченияРесурсов,
	                                        ПараметрыКоманды);

	ВыводКоманды = ВозвращаемыеЗначения["ОграниченияРесурсов"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыОбъекта.ПараметрыКоманды("Список"), ВыводКоманды);

КонецФункции // Вывод_ОграниченияРесурсовСписок()

Функция Вывод_ОграниченияРесурсовПараметры()
	
	Результат = Новый Массив();

	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Агент_СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_ПараметрыАвторизации());
	
	Ограничения = РазобратьВыводКоманды(ВозвращаемыеЗначения["ОграниченияРесурсов"]);

	Для Каждого ТекОграничение Из Ограничения Цикл

		ПараметрыКоманды.Вставить("ИмяОграничения", ТекОграничение["name"]);

		ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент,
		                                        Перечисления.РежимыАдминистрирования.ОграниченияРесурсов,
		                                        ПараметрыКоманды);
	        
		ВыводКоманды = ТекОграничение["ТекстОбъекта"];

		Результат.Добавить(Новый Структура("ПараметрыКоманды, ВыводКоманды",
	                                       ПараметрыОбъекта.ПараметрыКоманды("Описание"),
	                                       ВыводКоманды));

	КонецЦикла;

	Возврат Результат;

КонецФункции // Вывод_ОграниченияРесурсовПараметрыЗначения()

Процедура Инициализация()
	
	Лог = Служебный.Лог();

	КаталогФикстур = ТекущийСценарий().Каталог;

	ВозвращаемыеЗначения = ПрочитатьМакетыОбъектовСервера(КаталогФикстур);
	
	ПараметрыКластера = Новый Структура();

	ПараметрыКластера.Вставить("Администраторы",
	    Новый Структура("Список, СписокПослеДобавления, Параметры, Добавить, Изменить, Удалить"));
	ПараметрыКластера.Администраторы.Список                = Вывод_АдминистраторыСписок();
	ПараметрыКластера.Администраторы.СписокПослеДобавления = Вывод_АдминистраторыСписокПослеДобавления();

	ПараметрыКластера.Вставить("Кластеры",
	    Новый Структура("Список, Параметры, Администраторы, Добавить, Изменить, Удалить"));
	ПараметрыКластера.Кластеры.Список            = Вывод_КластерыСписок();
	ПараметрыКластера.Кластеры.Параметры         = Вывод_КластерыПараметры();
	ПараметрыКластера.Кластеры.Администраторы    = Новый Структура("Список,
	                                                              |СписокПослеДобавления,
	                                                              |Параметры,
	                                                              |Добавить,
	                                                              |Изменить,
	                                                              |Удалить");
	ПараметрыКластера.Кластеры.Администраторы.Список                = Вывод_КластерыАдминистраторыСписок();
	ПараметрыКластера.Кластеры.Администраторы.СписокПослеДобавления = Вывод_КластерыАдминистраторыСписокПослеДобавления();

	ПараметрыКластера.Вставить("Менеджеры",
		Новый Структура("Список, Параметры"));
	ПараметрыКластера.Менеджеры.Список        = Вывод_МенеджерыСписок();
	ПараметрыКластера.Менеджеры.Параметры     = Вывод_МенеджерыПараметры();

	ПараметрыКластера.Вставить("Серверы",
	    Новый Структура("Список, СписокПослеДобавления, Параметры, Добавить, Изменить, Удалить"));
	ПараметрыКластера.Серверы.Список                = Вывод_СерверыСписок();
	ПараметрыКластера.Серверы.СписокПослеДобавления = Вывод_СерверыСписокПослеДобавления();
	ПараметрыКластера.Серверы.Добавить              = Вывод_СерверыДобавить();
	ПараметрыКластера.Серверы.Параметры             = Вывод_СерверыПараметры();

	ПараметрыКластера.Вставить("РабочиеПроцессы",
	    Новый Структура("Список, Параметры, Лицензии"));
	ПараметрыКластера.РабочиеПроцессы.Список     = Вывод_РабочиеПроцессыСписок();
	ПараметрыКластера.РабочиеПроцессы.Параметры  = Вывод_РабочиеПроцессыПараметры();
	ПараметрыКластера.РабочиеПроцессы.Лицензии   = Новый Структура("Список, Описание");
	ПараметрыКластера.РабочиеПроцессы.Лицензии.Список   = Вывод_РабочиеПроцессыСписокЛицензии();
	ПараметрыКластера.РабочиеПроцессы.Лицензии.Описание = Вывод_РабочиеПроцессыПараметрыЛицензии();

	ПараметрыКластера.Вставить("Сервисы",
	    Новый Структура("Список, Параметры"));
	ПараметрыКластера.Сервисы.Список    = Вывод_СервисыСписок();

	ПараметрыКластера.Вставить("Сеансы",
	    Новый Структура("Список, Параметры, Лицензии"));
	ПараметрыКластера.Сеансы.Список        = Вывод_СеансыСписок();
	ПараметрыКластера.Сеансы.Параметры     = Вывод_СеансыПараметры();
	ПараметрыКластера.Сеансы.Лицензии      = Новый Структура("Список, Описание");
	ПараметрыКластера.Сеансы.Лицензии.Список   = Вывод_СеансыСписокЛицензии();
	ПараметрыКластера.Сеансы.Лицензии.Описание = Вывод_СеансыПараметрыЛицензии();

	ПараметрыКластера.Вставить("Соединения",
	    Новый Структура("Список, Параметры"));
	ПараметрыКластера.Соединения.Список        = Вывод_СоединенияСписок();

	ПараметрыКластера.Вставить("Блокировки",
	    Новый Структура("Список, Параметры"));
	ПараметрыКластера.Блокировки.Список        = Вывод_БлокировкиСписок();

	ПараметрыКластера.Вставить("ИБ",
	    Новый Структура("Список,
	                    |СписокПослеДобавления,
	                    |СокращенныеПараметры,
	                    |ПолныеПараметры,
	                    |НедостаточноПрав,
	                    |Добавить,
	                    |Изменить,
	                    |Удалить"));
	ПараметрыКластера.ИБ.Список                 = Вывод_ИБСписок();
	ПараметрыКластера.ИБ.СписокПослеДобавления  = Вывод_ИБСписокПослеДобавления();
	ПараметрыКластера.ИБ.Добавить               = Вывод_ИБДобавить();
	ПараметрыКластера.ИБ.СокращенныеПараметры   = Вывод_ИБСокращенныеПараметры();
	ПараметрыКластера.ИБ.ПолныеПараметры        = Вывод_ИБПолныеПараметры();
	ПараметрыКластера.ИБ.НедостаточноПрав       = Вывод_ИБНедостаточноПрав();

	ПараметрыКластера.Вставить("НазначенияФункциональности",
	    Новый Структура("Список, Параметры, Добавить, Изменить, Удалить"));
	ПараметрыКластера.НазначенияФункциональности.Список       = Вывод_НазначенияФункциональностиСписок();
	ПараметрыКластера.НазначенияФункциональности.Параметры    = Вывод_НазначенияФункциональностиПараметры();

	СтруктураПрофилей = Новый Структура("Список,
	                                    |Добавить,
	                                    |Изменить,
	                                    |Удалить,
	                                    |Каталоги,
	                                    |COMКлассы,
	                                    |Компоненты,
	                                    |Модули,
	                                    |Приложения,
	                                    |ИнтернетРесурсы");

	СтруктураПрофилей.Список            = Вывод_ПрофилиБезопасностиСписок();
	СтруктураПрофилей.Каталоги          = Новый Структура("Список, Параметры",
	                                                      Вывод_ПрофилиБезопасностиКаталогиСписок());
	СтруктураПрофилей.COMКлассы         = Новый Структура("Список, Параметры",
	                                                      Вывод_ПрофилиБезопасностиCOMКлассыСписок());
	СтруктураПрофилей.Компоненты        = Новый Структура("Список, Параметры",
	                                                      Вывод_ПрофилиБезопасностиКомпонентыСписок());
	СтруктураПрофилей.Модули            = Новый Структура("Список, Параметры",
	                                                      Вывод_ПрофилиБезопасностиМодулиСписок());
	СтруктураПрофилей.Приложения        = Новый Структура("Список, Параметры",
	                                                      Вывод_ПрофилиБезопасностиПриложенияСписок());
	СтруктураПрофилей.ИнтернетРесурсы   = Новый Структура("Список, Параметры",
	                                                      Вывод_ПрофилиБезопасностиИнтернетРесурсыСписок());
	
	ПараметрыКластера.Вставить("ПрофилиБезопасности", СтруктураПрофилей);

	ПараметрыКластера.Вставить("СчетчикиРесурсов",
	    Новый Структура("Список, Параметры, Значения"));
	ПараметрыКластера.СчетчикиРесурсов.Список    = Вывод_СчетчикиРесурсовСписок();
	ПараметрыКластера.СчетчикиРесурсов.Параметры = Вывод_СчетчикиРесурсовПараметры();
	ПараметрыКластера.СчетчикиРесурсов.Значения  = Новый Структура("Список",
	                                                               Вывод_СчетчикиРесурсовПараметрыЗначения());

	ПараметрыКластера.Вставить("ОграниченияРесурсов",
	    Новый Структура("Список, Параметры"));
	ПараметрыКластера.ОграниченияРесурсов.Список    = Вывод_ОграниченияРесурсовСписок();
	ПараметрыКластера.ОграниченияРесурсов.Параметры = Вывод_ОграниченияРесурсовПараметры();

КонецПроцедуры // Инициализация()

Функция ПрочитатьМакетыОбъектовСервера(Знач ПутьККаталогу)

	СтруктураМакетов = Новый Соответствие();

	МассивФайлов = НайтиФайлы(ПутьККаталогу, "Макет_*.txt");

	ДлинаПрефикса = 7;

	Для Каждого ТекМакет Из МассивФайлов Цикл
		ТекстМакета = Новый ТекстовыйДокумент();
		ТекстМакета.Прочитать(ТекМакет.ПолноеИмя, КодировкаТекста.UTF8);

		СтруктураМакетов.Вставить(Сред(ТекМакет.ИмяБезРасширения, ДлинаПрефикса), ТекстМакета.ПолучитьТекст());
	КонецЦикла;

	Возврат СтруктураМакетов;

КонецФункции // ПрочитатьМакетыОбъектовСервера()

// Возвращает текущие параметры тестового окружения
//
// Параметры:
//    Обновить          - Булево         - Истина - обновить параметры тестирования принудительно
//
// Возвращаемое значение:
//    Структура         - параметры тестового окружения
//
Функция Параметры(Обновить = Ложь) Экспорт

	Если ТипЗнч(ПараметрыТестирования) = Тип("Структура") И НЕ Обновить Тогда
		Возврат ПараметрыТестирования;
	КонецЕсли;

	Параметры = Новый Структура();

	ЭтоСерверСборок = Ложь;
	ЭтоСерверСборок = ВРег(ПолучитьПеременнуюСреды("CI")) = ВРег("true");

	Параметры.Вставить("ЭтоСерверСборок"      , ЭтоСерверСборок);

	// Проверим что есть "местный" файл параметров тестирования
	ПутьКФайлуПараметров = ОбъединитьПути(ТекущийСценарий().Каталог, "ПараметрыТестирования.txt");

	МакетПараметров = Новый Файл(ПутьКФайлуПараметров);

	// Если "местного" файла нет, то используем файл с параметрами по умолчанию
	Если НЕ МакетПараметров.Существует() Тогда
		ПутьКФайлуПараметров = ОбъединитьПути(ТекущийСценарий().Каталог, "ПараметрыТестирования.ПоУмолчанию.txt");
	КонецЕсли;

	МакетПараметров = Новый Файл(ПутьКФайлуПараметров);

	Если МакетПараметров.Существует() Тогда

		ПараметрыПоУмолчанию = ПрочитатьПараметрыТестированияИзФайла(ПутьКФайлуПараметров);
	    
		Для Каждого ТекПараметр Из ПараметрыПоУмолчанию Цикл
			Параметры.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);
		КонецЦикла;

		ПараметрыТестирования = Параметры;

	КонецЕсли;
	
	Возврат ПараметрыТестирования;

КонецФункции // Параметры()

Функция ПрочитатьПараметрыТестированияИзФайла(Знач ПутьКФайлу)

	Параметры = Новый Структура();

	МакетПараметров = Новый Файл(ПутьКФайлу);

	Если НЕ МакетПараметров.Существует() Тогда
		Возврат Параметры;
	КонецЕсли;

	ТекстМакета = Новый ТекстовыйДокумент();
	ТекстМакета.Прочитать(МакетПараметров.ПолноеИмя, КодировкаТекста.UTF8);

	Для й = 1 По ТекстМакета.КоличествоСтрок() Цикл

		МассивПараметр = СтрРазделить(ТекстМакета.ПолучитьСтроку(й), "=");

		Если МассивПараметр.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если МассивПараметр.Количество() = 1 Тогда
			МассивПараметр.Добавить("");
		КонецЕсли;

		Попытка
			Параметры.Вставить(СокрЛП(МассивПараметр[0]), СокрЛП(МассивПараметр[1]));
		Исключение
			Лог.Отладка("Ошибка чтения параметра """ + СокрЛП(МассивПараметр[0]) + """: " + ОписаниеОшибки());
		КонецПопытки;

	КонецЦикла;

	Возврат Параметры;

КонецФункции // ПрочитатьПараметрыТестированияИзФайла()

// Функция преобразует переданный текст вывода команды в массив соответствий
// элементы массива создаются по блокам текста, разделенным пустой строкой
// пары <ключ, значение> структуры получаются для каждой строки с учетом разделителя ":"
//   
// Параметры:
//   ВыводКоманды            - Строка            - текст для разбора
//   
// Возвращаемое значение:
//    Массив (Соответствие) - результат разбора
//
Функция РазобратьВыводКоманды(Знач ВыводКоманды)
	
	Текст = Новый ТекстовыйДокумент();
	Текст.УстановитьТекст(ВыводКоманды);

	МассивРезультатов = Новый Массив();
	Описание = Новый Соответствие();

	ТекстОбъекта = "";

	Для й = 1 По Текст.КоличествоСтрок() Цикл

		ТекстСтроки = Текст.ПолучитьСтроку(й);
	    
		ПозРазделителя = СтрНайти(ТекстСтроки, ":");

		Если НЕ ЗначениеЗаполнено(ТекстСтроки) Тогда
			Если й = 1 Тогда
				Продолжить;
			КонецЕсли;
			Описание.Вставить("ТекстОбъекта", ТекстОбъекта + Символы.ПС);
			МассивРезультатов.Добавить(Описание);
			Описание = Новый Соответствие();
			ТекстОбъекта = "";
			Продолжить;
		КонецЕсли;
		
		Если ПозРазделителя = 0 Тогда
			Продолжить;
		КонецЕсли;
	    
		Описание.Вставить(СокрЛП(Лев(ТекстСтроки, ПозРазделителя - 1)), СокрЛП(Сред(ТекстСтроки, ПозРазделителя + 1)));
		ТекстОбъекта = ТекстОбъекта + ТекстСтроки + Символы.ПС;

	КонецЦикла;

	Возврат МассивРезультатов;

КонецФункции // РазобратьВыводКоманды()

Инициализация();