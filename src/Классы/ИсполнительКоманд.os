// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/irac/
// ----------------------------------------------------------
#Использовать strings
#Использовать v8find

Перем ЭтоWindows;
Перем ВыводКоманды;
Перем КодВозврата;
Перем СпособПодключения;
Перем ПутьКУтилитеАдминистрирования;
Перем ВерсияУтилитыАдминистрирования;

Перем Лог;

#Область Инициализация

// Конструктор
//   
// Параметры:
//   ВерсияИлиПутьКУтилитеАдминистрирования  - Строка  - маска версии 1С, путь к утилите RAC
//                                                       или адрес сервиса hiRAC
//
Процедура ПриСозданииОбъекта(ВерсияИлиПутьКУтилитеАдминистрирования = "8.3")

	Лог = Служебный.Лог();

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;

	ВерсияУтилитыАдминистрирования = "";

	Если ЗначениеЗаполнено(ВерсияИлиПутьКУтилитеАдминистрирования) Тогда
		ИнициализироватьУтилитуАдминистрирования(ВерсияИлиПутьКУтилитеАдминистрирования);
	КонецЕсли;

КонецПроцедуры // ПриСозданииОбъекта()

#КонецОбласти // Инициализация

#Область ПрограммныйИнтерфейс

// Функция возвращает способ подключения к сервису администрирования кластера 1С
//   
// Возвращаемое значение:
//    Строка - способ подключения к сервису администрирования кластера 1С
//
Функция СпособПодключения() Экспорт

	Возврат СпособПодключения;

КонецФункции // СпособПодключения()

// Процедура ищет утилиту RAC и выполняет инициализацию
//   
// Параметры:
//   ВерсияИлиПутьКУтилитеАдминистрирования  - Строка  - маска версии 1С, путь к утилите RAC
//                                                       или адрес сервиса hiRAC
//
Процедура ИнициализироватьУтилитуАдминистрирования(ВерсияИлиПутьКУтилитеАдминистрирования = "") Экспорт

	// Если версия установлена и не указано новая, то инициализация не выполняется
	Если ЗначениеЗаполнено(ВерсияУтилитыАдминистрирования)
	   И НЕ ЗначениеЗаполнено(ВерсияИлиПутьКУтилитеАдминистрирования) Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ВерсияИлиПутьКУтилитеАдминистрирования) Тогда
		ПутьКУтилитеАдминистрирования = ВерсияИлиПутьКУтилитеАдминистрирования;
	КонецЕсли;

	// по-умолчанию ищем последнюю версию 8.3
	Если НЕ ЗначениеЗаполнено(ПутьКУтилитеАдминистрирования) Тогда
		ПутьКУтилитеАдминистрирования = "8.3";
	КонецЕсли;

	СпособПодключения = СпособПодключенияВАдресе(ВерсияИлиПутьКУтилитеАдминистрирования);

	Если СпособПодключения = Перечисления.СпособыПодключения.Локально Тогда
		ШаблонПроверки = "8.";
		Если Лев(ВерсияИлиПутьКУтилитеАдминистрирования, СтрДлина(ШаблонПроверки)) = ШаблонПроверки Тогда
			ПутьКУтилитеАдминистрирования = Платформа1С.ПутьКRAC(ВерсияИлиПутьКУтилитеАдминистрирования);
		КонецЕсли;

		ФайлУтилитыАдминистрирования = Новый Файл(ПутьКУтилитеАдминистрирования);
		Если Не ФайлУтилитыАдминистрирования.Существует() Тогда
			ВызватьИсключение "Нельзя установить несуществующий путь к утилите RAC: " + ФайлУтилитыАдминистрирования.ПолноеИмя;
		КонецЕсли;

	КонецЕсли;

	ВерсияУтилитыАдминистрирования = ПолучитьВерсиюУтилитыАдминистрирования(ПутьКУтилитеАдминистрирования);

	ТипыОбъектовКластера.УстановитьВерсиюУтилитыАдминистрирования(ВерсияУтилитыАдминистрирования);
	ТипыОбъектовКластера.УстановитьУровеньЛога(Лог.Уровень());
	ТипыОбъектовКластера.Инициализация();

КонецПроцедуры // ИнициализироватьУтилитуАдминистрирования()

// Функция возвращает версию утилиты RAC
//   
// Возвращаемое значение:
//    Строка - версия утилиты администрирования
//
Функция ВерсияУтилитыАдминистрирования() Экспорт

	Возврат ВерсияУтилитыАдминистрирования;

КонецФункции // ВерсияУтилитыАдминистрирования()

// Функция возвращает путь к утилите RAC
//   
// Возвращаемое значение:
//    Строка - текущий путь к утилите RAC
//
Функция ПутьКУтилитеАдминистрирования() Экспорт
	
	Возврат ПутьКУтилитеАдминистрирования;

КонецФункции // ПутьКУтилитеАдминистрирования()

// Функция выполняет запуск утилиты администрирования кластера 1С (rac) с указанными параметрами
// 
// Параметры:
//    ПараметрыКоманды         - Масссив,     - список параметров запуска
//                               Строка         утилиты администрирования кластера 1С (rac)
//
// Возвращаемое значение:
//    Строка - вывод команды
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт

	ИнициализироватьУтилитуАдминистрирования();

	Если СпособПодключения = Перечисления.СпособыПодключения.Удаленно Тогда
		Возврат ВыполнитьКомандуУдаленно(ПараметрыКоманды);
	Иначе
		Если ТипЗнч(ПараметрыКоманды) = Тип("Массив") Тогда
			ПараметрыДляВыполнения = ПараметрыКоманды;
		Иначе
			ПараметрыДляВыполнения = Новый Массив();
			ПараметрыДляВыполнения.Добавить(ПараметрыКоманды);
		КонецЕсли;
		Возврат ВыполнитьКомандуЛокально(ПараметрыДляВыполнения);
	КонецЕсли;

КонецФункции // ВыполнитьКоманду()

// Функция возвращает текст результата выполнения команды
//   
// Параметры:
//    РазобратьВывод        - Булево      - Истина - выполнить преобразование вывода команды в структуру
//                                          Ложь - вернуть текст вывода команды как есть
//
// Возвращаемое значение:
//    Структура, Строка    - вывод команды
//
Функция ВыводКоманды(Знач РазобратьВывод = Ложь) Экспорт

	Если РазобратьВывод Тогда
		Возврат Служебный.РазобратьВыводКоманды(ВыводКоманды);
	КонецЕсли;

	Возврат ВыводКоманды;

КонецФункции // ВыводКоманды()

// Функция возвращает код возврата выполнения команды
//   
// Возвращаемое значение:
//    Число - код возврата команды
//
Функция КодВозврата() Экспорт

	Возврат КодВозврата;

КонецФункции // КодВозврата()

#КонецОбласти // ПрограммныйИнтерфейс

#Область ВыполнениеКомандСистемы

// Функция выполняет запуск утилиты администрирования кластера 1С (rac) с указанными параметрами
// 
// Параметры:
//    ПараметрыКоманды   - Масссив   - список параметров запуска утилиты администрирования кластера 1С (rac)
// 
// Возвращаемое значение:
//    Строка - вывод команды
//
Функция ВыполнитьКомандуЛокально(Знач ПараметрыКоманды)

	Приложение = Служебный.ОбернутьВКавычки(ПутьКУтилитеАдминистрирования());

	СтрокаДляЛога = "";

	Для Каждого Параметр Из ПараметрыКоманды Цикл
		Если Найти(Параметр, "-pwd") = 0 Тогда
			СтрокаДляЛога = СтрокаДляЛога + " " + Параметр;
		КонецЕсли;
	КонецЦикла;

	КодВозврата = 0;

	Лог.Отладка("%1 %2", Приложение, СтрокаДляЛога);

	Команда = Новый Команда;
	
	Команда.УстановитьКоманду(Приложение);
	Команда.УстановитьКодировкуВывода(КодировкаТекста.OEM);
	Команда.ДобавитьПараметры(ПараметрыКоманды);
	Команда.УстановитьИсполнениеЧерезКомандыСистемы(Ложь);
	Команда.ПоказыватьВыводНемедленно(Ложь);
	
	КодВозврата = Команда.Исполнить();
	
	ВыводКоманды = Команда.ПолучитьВывод();

	Если КодВозврата = 0 Тогда
		Лог.Отладка("Код возврата равен %1: %2", КодВозврата, ВыводКоманды());
	Иначе
		Лог.Предупреждение("Получен ненулевой код возврата %1: %2", КодВозврата, ВыводКоманды());
	КонецЕсли;

	Возврат ВыводКоманды();

КонецФункции // ВыполнитьКомандуЛокально()

// Функция выполняет вызов удаленной утилиты администрирования кластера 1С
// с использованием HTTP-сервиса (hiRAC) с указанными параметрами
//   
// Параметры:
//    ПараметрыКоманды         - Масссив     - список параметров запуска утилиты администрирования кластера 1С (rac)
//    
// Возвращаемое значение:
//    Строка - вывод команды
//
Функция ВыполнитьКомандуУдаленно(Знач ПараметрыКоманды)

	СтрокаКоманды = "";
	Для Каждого ТекПараметр Из ПараметрыКоманды Цикл
		Если ЗначениеЗаполнено(СтрокаКоманды) Тогда
			СтрокаКоманды = СтрокаКоманды + " ";
		КонецЕсли;
		СтрокаКоманды = СтрокаКоманды + ТекПараметр;
	КонецЦикла;

	Параметры = Новый Структура();
	Параметры.Вставить("version", ВерсияУтилитыАдминистрирования());
	Параметры.Вставить("cmd", СтрокаКоманды);

	Ответ = КоннекторHTTP.Get(ПутьКУтилитеАдминистрирования, Параметры).Json();
	
	КодВозврата  = Ответ["КодВозврата"];
	ВыводКоманды = Ответ["ВыводКоманды"];

	Возврат ВыводКоманды();

КонецФункции // ВыполнитьКомандуУдаленно()

#КонецОбласти // ВыполнениеКомандСистемы

#Область СлужебныеПроцедурыИФункции

// Функция возвращает способ подключения к сервису администрирования кластера 1С
// по указанному адресу
//
// Параметры:
//   ВерсияИлиПутьКУтилитеАдминистрирования  - Строка  - маска версии 1С, путь к утилите RAC
//                                                       или адрес сервиса hiRAC
//
// Возвращаемое значение:
//    Строка - способ подключения к сервису администрирования кластера 1С
//
Функция СпособПодключенияВАдресе(ВерсияИлиПутьКУтилитеАдминистрирования)

	Если ВРег(Лев(ВерсияИлиПутьКУтилитеАдминистрирования, "5")) = ВРег("http:")
	 ИЛИ ВРег(Лев(ВерсияИлиПутьКУтилитеАдминистрирования, "6")) = ВРег("https:") Тогда
		Возврат Перечисления.СпособыПодключения.Удаленно;
	Иначе
		Возврат Перечисления.СпособыПодключения.Локально;
	КонецЕсли;

КонецФункции // СпособПодключенияВАдресе()

// Функция получает версию локальной утилиты RAC по переданному пути
//   
// Параметры:
//   Путь         - Строка        - путь к утилите RAC
//
// Возвращаемое значение:
//    Строка - версия утилиты RAC
//
Функция ПолучитьВерсиюУтилитыАдминистрированияЛокально(Знач Путь)

	Команда = Новый Команда;
	СтрокаЗапуска = Служебный.ОбернутьВКавычки(Путь) + " -v ";
	Команда.УстановитьСтрокуЗапуска(СтрокаЗапуска);
	Команда.УстановитьПравильныйКодВозврата(0);
	Попытка
		Команда.Исполнить();
		Возврат СокрЛП(Команда.ПолучитьВывод());
	Исключение
		Лог.Предупреждение("Не удалось прочитать версию 1С %1.
		|" + ОписаниеОшибки(), СтрокаЗапуска);
	КонецПопытки;
	
	Возврат "";

КонецФункции // ПолучитьВерсиюУтилитыАдминистрированияЛокально()

// Функция получает версию удаленной утилиты RAC по переданному адресу HTTP-сервиса (hiRAC)
//   
// Параметры:
//   Путь         - Строка        - адрес HTTP-сервиса (hiRAC)
//
// Возвращаемое значение:
//    Строка - версия утилиты RAC
//
Функция ПолучитьВерсиюУтилитыАдминистрированияУдаленно(Знач Путь)

	Параметры = Новый Структура();
	Параметры.Вставить("cmd", "--version");

	Ответ = КоннекторHTTP.Get(Путь, Параметры).Json();

	Возврат Ответ["Версия"];

КонецФункции // ПолучитьВерсиюУтилитыАдминистрированияУдаленно()

// Функция получает версию утилиты RAC по переданному пути
//   
// Параметры:
//   Путь         - Строка        - путь к утилите RAC
//
// Возвращаемое значение:
//    Строка - версия утилиты RAC
//
Функция ПолучитьВерсиюУтилитыАдминистрирования(Знач Путь)

	Если СпособПодключения = Перечисления.СпособыПодключения.Удаленно Тогда
		Возврат ПолучитьВерсиюУтилитыАдминистрированияУдаленно(Путь);
	Иначе
		Возврат ПолучитьВерсиюУтилитыАдминистрированияЛокально(Путь);
	КонецЕсли;
	
КонецФункции // ПолучитьВерсиюУтилитыАдминистрирования()

#КонецОбласти // СлужебныеПроцедурыИФункции
