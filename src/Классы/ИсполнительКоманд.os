// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/irac/
// ----------------------------------------------------------
#Использовать strings
#Использовать v8find

Перем ВыводКоманды;       // - Строка    - вывод выполненной команды
Перем КодВозврата;        // - Строка    - код возврата выполненной команды
Перем СпособПодключения;  // - Строка    - способ подключения к сервису администрирования кластера 1С (rac, hirac)
Перем ВерсияRAC;          // - Строка    - версия утилиты администрирования (RAC)
Перем ПутьКRAC;           // - Строка    - путь к утилите администрирования (RAC)

Перем Лог;                // - Логирование    - объект-логгер

#Область Инициализация

// Конструктор
//
// Параметры:
//   ВерсияИлиПутьКRAC  - Строка  - маска версии 1С, путь к утилите RAC или адрес сервиса HiRAC
//
Процедура ПриСозданииОбъекта(ВерсияИлиПутьКRAC = "8.3")

	Лог = Служебный.Лог();

	ИнициализироватьRAC(ВерсияИлиПутьКRAC);

КонецПроцедуры // ПриСозданииОбъекта()

#КонецОбласти // Инициализация

#Область ПрограммныйИнтерфейс

// Функция возвращает способ подключения к сервису администрирования кластера 1С
//
// Возвращаемое значение:
//    Строка - способ подключения к сервису администрирования кластера 1С
//
Функция СпособПодключения() Экспорт

	Возврат СпособПодключения;

КонецФункции // СпособПодключения()

// Процедура ищет утилиту RAC и выполняет инициализацию
//
// Параметры:
//   ВерсияИлиПутьКRAC  - Строка  - маска версии 1С, путь к утилите RAC
//                                                       или адрес сервиса hiRAC
//
Процедура ИнициализироватьRAC(ВерсияИлиПутьКRAC = "8.3") Экспорт

	// Если версия установлена и не указано новая, то инициализация не выполняется
	Если ЗначениеЗаполнено(ВерсияRAC)
		И НЕ ЗначениеЗаполнено(ВерсияИлиПутьКRAC) Тогда
		 Возврат;
	 КонецЕсли;

	 Если ВерсияRAC = ВерсияИлиПутьКRAC ИЛИ ПутьКRAC = ВерсияИлиПутьКRAC Тогда
		 Возврат;
	 КонецЕсли;
  
	Если ЗначениеЗаполнено(ВерсияИлиПутьКRAC) Тогда
		ПутьКRAC = ВерсияИлиПутьКRAC;
	КонецЕсли;

	СпособПодключения = СпособПодключенияВАдресе(ВерсияИлиПутьКRAC);

	Если СпособПодключения = Перечисления.СпособыПодключения.Локально Тогда
		УстановитьПутьКRAC(ВерсияИлиПутьКRAC);
	КонецЕсли;

	ВерсияRAC = ПолучитьВерсиюRAC(ПутьКRAC);

КонецПроцедуры // ИнициализироватьRAC()

// Функция возвращает версию утилиты RAC
//
// Возвращаемое значение:
//    Строка - версия утилиты администрирования
//
Функция ВерсияRAC() Экспорт

	Возврат ВерсияRAC;

КонецФункции // ВерсияRAC()

// Функция возвращает путь к утилите RAC
//
// Возвращаемое значение:
//    Строка - текущий путь к утилите RAC
//
Функция ПутьКRAC() Экспорт
	
	Возврат ПутьКRAC;

КонецФункции // ПутьКRAC()

// Процедура устанавливает путь к утилите RAC
//
// Параметры:
//   ВерсияИлиПутьКRAC    - Строка    - новая версия или путь к утилите RAC
//
Процедура УстановитьПутьКRAC(Знач ВерсияИлиПутьКRAC = "") Экспорт

	Если ВерсияИлиПутьКRAC = "" Тогда
		Возврат;
	КонецЕсли;

	ШаблонПроверки = "8.";
	Если Лев(ВерсияИлиПутьКRAC, СтрДлина(ШаблонПроверки)) = ШаблонПроверки Тогда
		Путь = Платформа1С.ПутьКRAC(ВерсияИлиПутьКRAC);
	Иначе
		Путь = ВерсияИлиПутьКRAC;
	КонецЕсли;

	ФайлRAC = Новый Файл(Путь);
	Если Не ФайлRAC.Существует() Тогда
		ВызватьИсключение "Нельзя установить несуществующий путь к утилите RAC: " + ФайлRAC.ПолноеИмя;
	КонецЕсли;

	ПутьКRAC = Путь;

КонецПроцедуры // УстановитьПутьКRAC()

// Функция выполняет запуск утилиты администрирования кластера 1С (rac) с указанными параметрами
// 
// Параметры:
//    ПараметрыКоманды         - Масссив      - список параметров запуска
//                               Строка         утилиты администрирования кластера 1С (rac)
//
// Возвращаемое значение:
//    Строка - вывод команды
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт

	ИнициализироватьRAC();

	Если СпособПодключения = Перечисления.СпособыПодключения.Удаленно Тогда
		Возврат ВыполнитьКомандуУдаленно(ПараметрыКоманды);
	Иначе
		Если ТипЗнч(ПараметрыКоманды) = Тип("Массив") Тогда
			ПараметрыДляВыполнения = ПараметрыКоманды;
		Иначе
			ПараметрыДляВыполнения = Новый Массив();
			ПараметрыДляВыполнения.Добавить(ПараметрыКоманды);
		КонецЕсли;
		Возврат ВыполнитьКомандуЛокально(ПараметрыДляВыполнения);
	КонецЕсли;

КонецФункции // ВыполнитьКоманду()

// Функция возвращает текст результата выполнения команды
//
// Параметры:
//    РазобратьВывод        - Булево      - Истина - выполнить преобразование вывода команды в структуру
//                                          Ложь - вернуть текст вывода команды как есть
//
// Возвращаемое значение:
//    Структура, Строка    - вывод команды
//
Функция ВыводКоманды(Знач РазобратьВывод = Ложь) Экспорт

	Если РазобратьВывод Тогда
		Возврат Служебный.РазобратьВыводКоманды(ВыводКоманды);
	КонецЕсли;

	Возврат ВыводКоманды;

КонецФункции // ВыводКоманды()

// Функция возвращает код возврата выполнения команды
//
// Возвращаемое значение:
//    Число - код возврата команды
//
Функция КодВозврата() Экспорт

	Возврат КодВозврата;

КонецФункции // КодВозврата()

#КонецОбласти // ПрограммныйИнтерфейс

#Область ВыполнениеКомандСистемы

// Функция выполняет запуск утилиты администрирования кластера 1С (rac) с указанными параметрами
// 
// Параметры:
//    ПараметрыКоманды   - Масссив   - список параметров запуска утилиты администрирования кластера 1С (rac)
// 
// Возвращаемое значение:
//    Строка - вывод команды
//
Функция ВыполнитьКомандуЛокально(Знач ПараметрыКоманды)

	Приложение = Служебный.ОбернутьВКавычки(ПутьКRAC());

	КодировкаВывода = КодировкаТекста.UTF8;

	НастройкаКодировки = ПолучитьПеременнуюСреды("RAC_ENCODING");
	Если ЗначениеЗаполнено(НастройкаКодировки) Тогда
		Попытка
			КодировкаВывода = КодировкаТекста[НастройкаКодировки];
		Исключение
			Лог.Ошибка("В переменной среды ""RAC_ENCODING"" указана некорректная
			           | кодировка ""%1"", ожидается ""UTF8"", ""OEM"", ""ANSI"".",
			           НастройкаКодировки);
		КонецПопытки;
	КонецЕсли;

	Команда = Новый Команда;
	
	Команда.УстановитьКоманду(Приложение);
	Команда.УстановитьКодировкуВывода(КодировкаВывода);
	Команда.ДобавитьПараметры(ПараметрыКоманды);
	Команда.УстановитьИсполнениеЧерезКомандыСистемы(Ложь);
	Команда.ПоказыватьВыводНемедленно(Ложь);
	
	КодВозврата = Команда.Исполнить();
	
	ВыводКоманды = Команда.ПолучитьВывод();

	Если КодВозврата = 0 Тогда
		Лог.Отладка("Код возврата равен %1: %2", КодВозврата, ВыводКоманды());
	Иначе
		Лог.Предупреждение("Получен ненулевой код возврата %1: %2", КодВозврата, ВыводКоманды());
	КонецЕсли;

	Возврат ВыводКоманды();

КонецФункции // ВыполнитьКомандуЛокально()

// Функция выполняет вызов удаленной утилиты администрирования кластера 1С
// с использованием HTTP-сервиса (hiRAC) с указанными параметрами
//
// Параметры:
//    ПараметрыКоманды         - Масссив     - список параметров запуска утилиты администрирования кластера 1С (rac)
//    
// Возвращаемое значение:
//    Строка - вывод команды
//
Функция ВыполнитьКомандуУдаленно(Знач ПараметрыКоманды)

	Параметры = Новый Структура();
	Параметры.Вставить("version", ВерсияRAC());
	Параметры.Вставить("cmd", ПараметрыКоманды);

	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();

	ЗаписатьJSON(Запись, Параметры);
	Данные = ПолучитьДвоичныеДанныеИзСтроки(Запись.Закрыть());
	
	Ответ = КоннекторHTTP.Post(СтрШаблон("%1/command/run", ПутьКRAC), Данные).Json();
	
	КодВозврата  = Ответ["returnCode"];
	ВыводКоманды = Ответ["output"];

	Возврат ВыводКоманды();

КонецФункции // ВыполнитьКомандуУдаленно()

#КонецОбласти // ВыполнениеКомандСистемы

#Область СлужебныеПроцедурыИФункции

// Функция возвращает способ подключения к сервису администрирования кластера 1С
// по указанному адресу
//
// Параметры:
//   ВерсияИлиПутьКRAC  - Строка  - маска версии 1С, путь к утилите RAC
//                                  или адрес сервиса hiRAC
//
// Возвращаемое значение:
//    Строка - способ подключения к сервису администрирования кластера 1С
//
Функция СпособПодключенияВАдресе(ВерсияИлиПутьКRAC)

	Если ВРег(Лев(ВерсияИлиПутьКRAC, "5")) = "HTTP:"
	 ИЛИ ВРег(Лев(ВерсияИлиПутьКRAC, "6")) = "HTTPS:" Тогда
		Возврат Перечисления.СпособыПодключения.Удаленно;
	Иначе
		Возврат Перечисления.СпособыПодключения.Локально;
	КонецЕсли;

КонецФункции // СпособПодключенияВАдресе()

// Функция получает версию локальной утилиты RAC по переданному пути
//
// Параметры:
//   Путь         - Строка        - путь к утилите RAC
//
// Возвращаемое значение:
//    Строка - версия утилиты RAC
//
Функция ПолучитьВерсиюRACЛокально(Знач Путь)

	Команда = Новый Команда;
	СтрокаЗапуска = Служебный.ОбернутьВКавычки(Путь) + " -v ";
	Команда.УстановитьСтрокуЗапуска(СтрокаЗапуска);
	Команда.УстановитьПравильныйКодВозврата(0);
	Попытка
		Команда.Исполнить();
		Возврат СокрЛП(Команда.ПолучитьВывод());
	Исключение
		Лог.Предупреждение("Не удалось прочитать версию 1С %1.
		|" + ОписаниеОшибки(), СтрокаЗапуска);
	КонецПопытки;
	
	Возврат "";

КонецФункции // ПолучитьВерсиюRACЛокально()

// Функция получает версию удаленной утилиты RAC по переданному адресу HTTP-сервиса (hiRAC)
//
// Параметры:
//   Путь         - Строка        - адрес HTTP-сервиса (hiRAC)
//
// Возвращаемое значение:
//    Строка - версия утилиты RAC
//
Функция ПолучитьВерсиюRACУдаленно(Знач Путь)

	Ответ = КоннекторHTTP.Get(СтрШаблон("%1/command/version", Путь)).Json();

	Возврат СокрЛП(Ответ["output"]);

КонецФункции // ПолучитьВерсиюRACУдаленно()

// Функция получает версию утилиты RAC по переданному пути
//
// Параметры:
//   Путь         - Строка        - путь к утилите RAC
//
// Возвращаемое значение:
//    Строка - версия утилиты RAC
//
Функция ПолучитьВерсиюRAC(Знач Путь)

	Если СпособПодключения = Перечисления.СпособыПодключения.Удаленно Тогда
		Возврат ПолучитьВерсиюRACУдаленно(Путь);
	Иначе
		Возврат ПолучитьВерсиюRACЛокально(Путь);
	КонецЕсли;
	
КонецФункции // ПолучитьВерсиюRAC()

#КонецОбласти // СлужебныеПроцедурыИФункции
