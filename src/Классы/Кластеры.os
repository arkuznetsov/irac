// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/irac/
// ----------------------------------------------------------

Перем Кластер_Агент;
Перем ПараметрыОбъекта;
Перем Элементы;

Перем Лог;

// Конструктор
//   
// Параметры:
//   АгентКластера       - АдминистрированиеКластера    - ссылка на родительский объект агента кластера
//
Процедура ПриСозданииОбъекта(АгентКластера)

	Лог = Служебный.Лог();

	Кластер_Агент = АгентКластера;

	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.Кластеры);

	Элементы = Новый ОбъектыКластера(ЭтотОбъект);

КонецПроцедуры // ПриСозданииОбъекта()

// Процедура получает список кластеров от утилиты администрирования кластера 1С
// и сохраняет в локальных переменных
//   
// Параметры:
//   ОбновитьПринудительно         - Булево   - Истина - принудительно обновить данные (вызов RAC)
//                                            - Ложь - данные будут получены если истекло время актуальности
//                                                     или данные не были получены ранее
//   
Процедура ОбновитьДанные(ОбновитьПринудительно = Ложь) Экспорт

	Если НЕ Элементы.ТребуетсяОбновление(ОбновитьПринудительно) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"  , Кластер_Агент.СтрокаПодключения());
	
	ПараметрыОбъекта.УстановитьЗначенияПараметровКоманд(ПараметрыКоманды);

	ПараметрыОбъекта.ВыполнитьКоманду("Список");

	МассивРезультатов = Кластер_Агент.ВыводКоманды();

	МассивКластеров = Новый Массив();
	Для Каждого ТекОписание Из МассивРезультатов Цикл
		МассивКластеров.Добавить(Новый Кластер(Кластер_Агент, ТекОписание));
	КонецЦикла;

	Элементы.Заполнить(МассивКластеров);

	Элементы.УстановитьАктуальность();

КонецПроцедуры // ОбновитьДанные()

// Функция возвращает коллекцию параметров объекта
//   
// Параметры:
//   ИмяПоляКлюча         - Строка    - имя поля, значение которого будет использовано
//                                      в качестве ключа возвращаемого соответствия
//   
// Возвращаемое значение:
//    Соответствие - коллекция параметров объекта, для получения/изменения значений
//
Функция ПараметрыОбъекта(ИмяПоляКлюча = "Имя") Экспорт

	Возврат ПараметрыОбъекта.ОписаниеСвойств(ИмяПоляКлюча);

КонецФункции // ПараметрыОбъекта()

// Функция возвращает список кластеров 1С
//   
// Параметры:
//   Отбор                     - Структура    - Структура отбора кластеров (<поле>:<значение>)
//   ОбновитьПринудительно     - Булево       - Истина - принудительно обновить данные (вызов RAC)
//   ЭлементыКакСоответствия   - Булево,      - Истина - элементы результата будут преобразованы в соответствия
//                               Строка         с именами свойств в качестве ключей
//                                              <Имя поля> - элементы результата будут преобразованы в соответствия
//                                              со значением указанного поля в качестве ключей ("Имя"|"ИмяРАК")
//                                              Ложь - (по умолчанию) элементы будут возвращены как есть
//
// Возвращаемое значение:
//    Массив - список кластеров 1С
//
Функция Список(Отбор = Неопределено, ОбновитьПринудительно = Ложь, ЭлементыКакСоответствия = Ложь) Экспорт

	СписокКластеров = Элементы.Список(Отбор, ОбновитьПринудительно, ЭлементыКакСоответствия);
	
	Возврат СписокКластеров;

КонецФункции // Список()

// Функция возвращает иерархический список кластеров 1С
//   
// Параметры:
//   ПоляИерархии              - Строка       - Поля для построения иерархии списка кластеров, разделенные ","
//   ОбновитьПринудительно     - Булево       - Истина - обновить список (вызов RAC)
//   ЭлементыКакСоответствия   - Булево,      - Истина - элементы результата будут преобразованы в соответствия
//                               Строка         с именами свойств в качестве ключей
//                                              <Имя поля> - элементы результата будут преобразованы в соответствия
//                                              со значением указанного поля в качестве ключей ("Имя"|"ИмяРАК")
//                                              Ложь - (по умолчанию) элементы будут возвращены как есть
//
// Возвращаемое значение:
//    Соответствие - список кластеров 1С
//        <имя поля объекта>    - Массив(Соответствие), Соответствие    - список кластеров или следующий уровень
//
Функция ИерархическийСписок(Знач ПоляИерархии, ОбновитьПринудительно = Ложь, ЭлементыКакСоответствия = Ложь) Экспорт

	СписокКластеров = Элементы.ИерархическийСписок(ПоляИерархии, ОбновитьПринудительно, ЭлементыКакСоответствия);
	
	Возврат СписокКластеров;

КонецФункции // ИерархическийСписок()

// Функция возвращает количество кластеров в списке
//   
// Возвращаемое значение:
//    Число - количество кластеров в списке
//
Функция Количество() Экспорт

	Если Элементы = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Элементы.Количество();

КонецФункции // Количество()

// Функция возвращает описание кластера 1С
//   
// Параметры:
//   Кластер                 - Строка    - Адрес кластера в виде <сервер>:<порт>
//   ОбновитьПринудительно   - Булево    - Истина - принудительно обновить данные (вызов RAC)
//   КакСоответствие         - Булево    - Истина - результат будет преобразован в соответствие
//
// Возвращаемое значение:
//    Соответствие - описание кластера 1С
//
Функция Получить(Знач Кластер, Знач ОбновитьПринудительно = Ложь, КакСоответствие = Ложь) Экспорт

	АдресКластера = СтрРазделить(Кластер, ":");

	Если АдресКластера.Количество() = 1 Тогда
		ПортКластера = "1541";
		АдресКластера.Добавить(ПортКластера);
	КонецЕсли;

	Отбор = Новый Соответствие();

	Отбор.Вставить("host", АдресКластера[0]);
	Отбор.Вставить("port", АдресКластера[1]);

	СписокКластеров = Элементы.Список(Отбор, ОбновитьПринудительно, КакСоответствие);
	
	Если СписокКластеров.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СписокКластеров[0];

КонецФункции // Получить()

// Процедура добавляет новый кластер 1С
//   
// Параметры:
//   Имя                  - Строка        - имя кластера 1С
//   АдресСервера         - Строка        - адрес сервера кластера 1С
//   ПортСервера          - Число         - порт сервера кластера 1С
//   ПараметрыКластера    - Структура     - параметры кластера 1С
//
Процедура Добавить(Имя, АдресСервера = "localhost", ПортСервера = 1541, ПараметрыКластера = Неопределено) Экспорт

	Если НЕ ТипЗнч(ПараметрыКластера) = Тип("Структура") Тогда
		ПараметрыКластера = Новый Структура();
	КонецЕсли;

	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"   , Кластер_Агент.СтрокаПодключения());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииАгента", Кластер_Агент.ПараметрыАвторизации());
	ПараметрыКоманды.Вставить("АдресСервера"              , АдресСервера);
	ПараметрыКоманды.Вставить("ПортСервера"               , ПортСервера);
	ПараметрыКоманды.Вставить("Имя"                       , Имя);
	
	Для Каждого ТекЭлемент Из ПараметрыКластера Цикл
		ПараметрыКоманды.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение);
	КонецЦикла;

	ПараметрыОбъекта.УстановитьЗначенияПараметровКоманд(ПараметрыКоманды);

	ПараметрыОбъекта.ВыполнитьКоманду("Добавить");

	Лог.Отладка(Кластер_Агент.ВыводКоманды(Ложь));

	ОбновитьДанные(Истина);

КонецПроцедуры // Добавить()

// Процедура удаляет кластер 1С
//   
// Параметры:
//   Кластер         - Строка       - Адрес кластера в виде <сервер>:<порт>
//
Процедура Удалить(Кластер) Экспорт
	
	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Кластер_Агент.СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Получить(Кластер).Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Получить(Кластер).ПараметрыАвторизации());
	
	ПараметрыОбъекта.УстановитьЗначенияПараметровКоманд(ПараметрыКоманды);

	ПараметрыОбъекта.ВыполнитьКоманду("Удалить");

	Лог.Отладка(Кластер_Агент.ВыводКоманды(Ложь));

	ОбновитьДанные(Истина);

КонецПроцедуры // Удалить()
