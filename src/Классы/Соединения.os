// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/irac/
// ----------------------------------------------------------

Перем Кластер_Агент;       // - УправлениеКластером1С    - родительский объект агента кластера
Перем Кластер_Владелец;    // - Кластер                  - родительский объект кластера
Перем Процесс_Владелец;
Перем ИБ_Владелец;

Перем ПараметрыОбъекта;    // - КомандыОбъекта    - объект-генератор команд объекта кластера
Перем Элементы;            // - ОбъектыКластера   - элементы коллекции объектов кластера

Перем Лог;      // - Логирование     - объект-логгер

// Конструктор
//
// Параметры:
//   АгентКластера    - УправлениеКластером1С    - ссылка на родительский объект агента кластера
//   Кластер          - Кластер                  - ссылка на родительский объект кластера
//   Процесс          - РабочийПроцесс           - ссылка на родительский объект рабочего процесса
//   ИБ               - ИнформационнаяБаза       - ссылка на родительский объект информационной базы
//
Процедура ПриСозданииОбъекта(АгентКластера, Кластер, Процесс = Неопределено, ИБ = Неопределено)

	Лог = Служебный.Лог();

	Кластер_Агент       = АгентКластера;
	Кластер_Владелец    = Кластер;
	Процесс_Владелец    = Процесс;
	ИБ_Владелец         = ИБ;

	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.Соединения);

	Элементы = Новый ОбъектыКластера(ЭтотОбъект);

КонецПроцедуры // ПриСозданииОбъекта()

// Процедура получает список соединений от утилиты администрирования кластера 1С
// и сохраняет в локальных переменных
//
// Параметры:
//   РежимОбновления          - Число        - 1 - обновить данные принудительно (вызов RAC)
//                                             0 - обновить данные только по таймеру
//                                            -1 - не обновлять данные
//
Процедура ОбновитьДанные(РежимОбновления = 0) Экспорт
	
	Если НЕ ТребуетсяОбновление(РежимОбновления) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Кластер_Агент.СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Владелец.Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_Владелец.ПараметрыАвторизации());
	
	Если НЕ Процесс_Владелец = Неопределено Тогда
		ПараметрыКоманды.Вставить("ИдентификаторПроцесса"   , Процесс_Владелец.Ид());
	КонецЕсли;

	Если НЕ ИБ_Владелец = Неопределено Тогда
		ПараметрыКоманды.Вставить("ИдентификаторИБ"       , ИБ_Владелец.Ид());
		ПараметрыКоманды.Вставить("ПараметрыАвторизацииИБ", ИБ_Владелец.ПараметрыАвторизации());
	КонецЕсли;

	ПараметрыОбъекта.УстановитьЗначенияПараметровКоманд(ПараметрыКоманды);

	КодВозврата = ПараметрыОбъекта.ВыполнитьКоманду("Список");
	ВыводКоманды = Кластер_Агент.ВыводКоманды(Ложь);

	Если НЕ КодВозврата = 0 Тогда
		ТекстОшибки = СтрШаблон("Ошибка получения списка соединений кластера ""%1"", КодВозврата = %2:%3%4",
		                        Кластер_Владелец.Имя(),
		                        КодВозврата,
		                        Символы.ПС,
		                        ВыводКоманды);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	МассивРезультатов = Кластер_Агент.ВыводКоманды();

	ИдентификаторыИБ = Новый Соответствие();
	ИдентификаторыПроцессов = Новый Соответствие();
	МассивСоединений = Новый Массив();
	Для Каждого ТекОписание Из МассивРезультатов Цикл
		Если ЗначениеЗаполнено(ИБ_Владелец) Тогда
			ТекИБ_Владелец = ИБ_Владелец;
		Иначе
			ТекИБ_Ид = ТекОписание["infobase"];
			ТекИБ_Владелец = ИдентификаторыИБ[ТекИБ_Ид];
			Если ТекИБ_Владелец = Неопределено И НЕ Служебный.ЭтоПустойGUID(ТекИБ_Ид) Тогда
				ТекИБ_Владелец = Кластер_Владелец.ИнформационныеБазы().Получить(ТекИБ_Ид);
				ИдентификаторыИБ.Вставить(ТекИБ_Ид, ТекИБ_Владелец);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Процесс_Владелец) Тогда
			ТекПроцесс_Владелец = Процесс_Владелец;
		Иначе
			ТекПроцесс_Ид = ТекОписание["process"];
			ТекПроцесс_Владелец = ИдентификаторыПроцессов[ТекПроцесс_Ид];
			Если ТекПроцесс_Владелец = Неопределено И НЕ Служебный.ЭтоПустойGUID(ТекПроцесс_Ид) Тогда
				ТекПроцесс_Владелец = Кластер_Владелец.РабочиеПроцессы().Получить(ТекПроцесс_Ид);
				ИдентификаторыПроцессов.Вставить(ТекПроцесс_Ид, ТекПроцесс_Владелец);
			КонецЕсли;
		КонецЕсли;
		МассивСоединений.Добавить(Новый Соединение(Кластер_Агент,
		                                           Кластер_Владелец,
		                                           ТекИБ_Владелец,
		                                           ТекОписание,
		                                           ТекПроцесс_Владелец));
	КонецЦикла;
	Элементы.Заполнить(МассивСоединений);

	Элементы.УстановитьАктуальность();

КонецПроцедуры // ОбновитьДанные()

// Функция признак необходимости обновления данных
//
// Параметры:
//   РежимОбновления          - Число        - 1 - обновить данные принудительно (вызов RAC)
//                                             0 - обновить данные только по таймеру
//                                            -1 - не обновлять данные
//
// Возвращаемое значение:
//    Булево - Истина - требуется обновитьданные
//
Функция ТребуетсяОбновление(РежимОбновления = 0) Экспорт

	Возврат Элементы.ТребуетсяОбновление(РежимОбновления);

КонецФункции // ТребуетсяОбновление()

// Функция возвращает описание параметров объекта
//
// Возвращаемое значение:
//    КомандыОбъекта - описание параметров объекта,
//
Функция ПараметрыОбъекта() Экспорт

	Возврат ПараметрыОбъекта;

КонецФункции // ПараметрыОбъекта()

// Функция возвращает список соединений
//
// Параметры:
//   Отбор                    - Структура    - Структура отбора соединений (<поле>:<значение>)
//   РежимОбновления          - Число        - 1 - обновить данные принудительно (вызов RAC)
//                                             0 - обновить данные только по таймеру
//                                            -1 - не обновлять данные
//   ЭлементыКакСоответствия  - Булево,      - Истина - элементы результата будут преобразованы в соответствия
//                              Строка         с именами свойств в качестве ключей
//                                             <Имя поля> - элементы результата будут преобразованы в соответствия
//                                             со значением указанного поля в качестве ключей ("Имя"|"ИмяРАК")
//                                             Ложь - (по умолчанию) элементы будут возвращены как есть
//
// Возвращаемое значение:
//    Массив - список соединений
//
Функция Список(Отбор = Неопределено, РежимОбновления = 0, ЭлементыКакСоответствия = Ложь) Экспорт

	Возврат Элементы.Список(Отбор, РежимОбновления, ЭлементыКакСоответствия);

КонецФункции // Список()

// Функция возвращает список соединений
//
// Параметры:
//   ПоляИерархии             - Строка       - Поля для построения иерархии списка соединений, разделенные ","
//   РежимОбновления          - Число        - 1 - обновить данные принудительно (вызов RAC)
//                                             0 - обновить данные только по таймеру
//                                            -1 - не обновлять данные
//   ЭлементыКакСоответствия  - Булево,      - Истина - элементы результата будут преобразованы в соответствия
//                              Строка         с именами свойств в качестве ключей
//                                             <Имя поля> - элементы результата будут преобразованы в соответствия
//                                             со значением указанного поля в качестве ключей ("Имя"|"ИмяРАК")
//                                             Ложь - (по умолчанию) элементы будут возвращены как есть
//
// Возвращаемое значение:
//    Соответствие - список соединений
//
Функция ИерархическийСписок(Знач ПоляИерархии, РежимОбновления = 0, ЭлементыКакСоответствия = Ложь) Экспорт

	Возврат Элементы.ИерархическийСписок(ПоляИерархии, РежимОбновления, ЭлементыКакСоответствия);

КонецФункции // ИерархическийСписок()

// Функция возвращает количество соединений в списке
//
// Возвращаемое значение:
//    Число - количество соединений
//
Функция Количество() Экспорт

	Если Элементы = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Элементы.Количество();

КонецФункции // Количество()

// Функция возвращает описание соединения
//
// Параметры:
//   НомерИлиИд             - Число, Строка  - Номер или идентификатор соединения
//   РежимОбновления        - Число          - 1 - обновить данные принудительно (вызов RAC)
//                                             0 - обновить данные только по таймеру
//                                            -1 - не обновлять данные
//   КакСоответствие        - Булево         - Истина - результат будет преобразован в соответствие
//
// Возвращаемое значение:
//    Соответствие - описание соединения
//
Функция Получить(Знач НомерИлиИд, Знач РежимОбновления = 0, КакСоответствие = Ложь) Экспорт

	Отбор = Новый Соответствие();

	Если Служебный.ЭтоGUID(НомерИлиИд) Тогда
		Отбор.Вставить("connection", НомерИлиИд);
	Иначе
		Отбор.Вставить("conn-id", Число(НомерИлиИд));
	КонецЕсли;

	Соединения = Элементы.Список(Отбор, РежимОбновления, КакСоответствие);

	Если НЕ ЗначениеЗаполнено(Соединения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Соединения[0];

КонецФункции // Получить()

// Процедура отключает соединение
//
// Параметры:
//   Номер                     - Структура    - Номер соединения
//
Процедура Отключить(Знач Номер) Экспорт

	Соединение = Получить(Номер, Истина);

	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Соединение.Отключить();

	ОбновитьДанные(Перечисления.РежимыОбновленияДанных.Принудительно);

КонецПроцедуры // Отключить()
