// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/irac/
// ----------------------------------------------------------

Перем Кластер_Агент;
Перем Кластер_Владелец;
Перем Процесс_Владелец;
Перем ИБ_Владелец;

Перем ПараметрыОбъекта;
Перем Элементы;

Перем Лог;

// Конструктор
//   
// Параметры:
//   АгентКластера  - АгентКластера         - ссылка на родительский объект агента кластера
//   Кластер        - Кластер               - ссылка на родительский объект кластера
//   Процесс        - РабочийПроцесс        - ссылка на родительский объект рабочего процесса
//   ИБ             - ИнформационнаяБаза    - ссылка на родительский объект информационной базы
//
Процедура ПриСозданииОбъекта(АгентКластера, Кластер, Процесс = Неопределено, ИБ = Неопределено)

	Лог = Служебный.Лог();

	Кластер_Агент       = АгентКластера;
	Кластер_Владелец    = Кластер;
	Процесс_Владелец    = Процесс;
	ИБ_Владелец         = ИБ;

	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.Соединения);

	Элементы = Новый ОбъектыКластера(ЭтотОбъект);

КонецПроцедуры // ПриСозданииОбъекта()

// Процедура получает список соединений от утилиты администрирования кластера 1С
// и сохраняет в локальных переменных
//   
// Параметры:
//   ОбновитьПринудительно         - Булево    - Истина - принудительно обновить данные (вызов RAC)
//                                            - Ложь - данные будут получены если истекло время актуальности
//                                                    или данные не были получены ранее
//   
Процедура ОбновитьДанные(ОбновитьПринудительно = Ложь) Экспорт
	
	Если НЕ Элементы.ТребуетсяОбновление(ОбновитьПринудительно) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Кластер_Агент.СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Владелец.Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_Владелец.ПараметрыАвторизации());
	
	Если НЕ Процесс_Владелец = Неопределено Тогда
		ПараметрыКоманды.Вставить("ИдентификаторПроцесса"   , Процесс_Владелец.Ид());
	КонецЕсли;

	Если НЕ ИБ_Владелец = Неопределено Тогда
		ПараметрыКоманды.Вставить("ИдентификаторИБ"       , ИБ_Владелец.Ид());
		ПараметрыКоманды.Вставить("ПараметрыАвторизацииИБ", ИБ_Владелец.ПараметрыАвторизации());
	КонецЕсли;

	ПараметрыОбъекта.УстановитьЗначенияПараметровКоманд(ПараметрыКоманды);

	КодВозврата = ПараметрыОбъекта.ВыполнитьКоманду("Список");
	
	Если НЕ КодВозврата = 0 Тогда
		ВызватьИсключение СтрШаблон("Ошибка получения списка соединений, КодВозврата = %1: %2",
	                                КодВозврата,
	                                Кластер_Агент.ВыводКоманды(Ложь));
	КонецЕсли;
	
	МассивРезультатов = Кластер_Агент.ВыводКоманды();

	МассивПроцессов = Новый Массив();
	Для Каждого ТекОписание Из МассивРезультатов Цикл
		МассивПроцессов.Добавить(Новый Соединение(Кластер_Агент,
												  Кластер_Владелец,
												  ИБ_Владелец,
												  ТекОписание,
												  Процесс_Владелец));
	КонецЦикла;
	Элементы.Заполнить(МассивПроцессов);

	Элементы.УстановитьАктуальность();

КонецПроцедуры // ОбновитьДанные()

// Функция возвращает коллекцию параметров объекта
//   
// Параметры:
//   ИмяПоляКлюча         - Строка    - имя поля, значение которого будет использовано
//                                      в качестве ключа возвращаемого соответствия
//   
// Возвращаемое значение:
//    Соответствие - коллекция параметров объекта, для получения/изменения значений
//
Функция ПараметрыОбъекта(ИмяПоляКлюча = "Имя") Экспорт

	Возврат ПараметрыОбъекта.ОписаниеСвойств(ИмяПоляКлюча);

КонецФункции // ПараметрыОбъекта()

// Функция возвращает список соединений
//   
// Параметры:
//   Отбор                    - Структура    - Структура отбора соединений (<поле>:<значение>)
//   ОбновитьПринудительно    - Булево       - Истина - принудительно обновить данные (вызов RAC)
//   ЭлементыКакСоответствия  - Булево,      - Истина - элементы результата будут преобразованы в соответствия
//                              Строка         с именами свойств в качестве ключей
//                                             <Имя поля> - элементы результата будут преобразованы в соответствия
//                                             со значением указанного поля в качестве ключей ("Имя"|"ИмяРАК")
//                                             Ложь - (по умолчанию) элементы будут возвращены как есть
//
// Возвращаемое значение:
//    Массив - список соединений
//
Функция Список(Отбор = Неопределено, ОбновитьПринудительно = Ложь, ЭлементыКакСоответствия = Ложь) Экспорт

	Соединения = Элементы.Список(Отбор, ОбновитьПринудительно, ЭлементыКакСоответствия);
	
	Возврат Соединения;

КонецФункции // Список()

// Функция возвращает список соединений
//   
// Параметры:
//   ПоляИерархии             - Строка       - Поля для построения иерархии списка соединений, разделенные ","
//   ОбновитьПринудительно    - Булево       - Истина - принудительно обновить данные (вызов RAC)
//   ЭлементыКакСоответствия  - Булево,      - Истина - элементы результата будут преобразованы в соответствия
//                              Строка         с именами свойств в качестве ключей
//                                             <Имя поля> - элементы результата будут преобразованы в соответствия
//                                             со значением указанного поля в качестве ключей ("Имя"|"ИмяРАК")
//                                             Ложь - (по умолчанию) элементы будут возвращены как есть
//
// Возвращаемое значение:
//    Соответствие - список соединений
//
Функция ИерархическийСписок(Знач ПоляИерархии, ОбновитьПринудительно = Ложь, ЭлементыКакСоответствия = Ложь) Экспорт

	Соединения = Элементы.ИерархическийСписок(ПоляИерархии, ОбновитьПринудительно, ЭлементыКакСоответствия);

	Возврат Соединения;

КонецФункции // ИерархическийСписок()

// Функция возвращает количество соединений в списке
//   
// Возвращаемое значение:
//    Число - количество соединений
//
Функция Количество() Экспорт

	Если Элементы = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Элементы.Количество();

КонецФункции // Количество()

// Функция возвращает описание соединения
//   
// Параметры:
//   Номер                  - Структура   - Номер соединения
//   ОбновитьПринудительно  - Булево      - Истина - принудительно обновить данные (вызов RAC)
//   КакСоответствие        - Булево      - Истина - результат будет преобразован в соответствие
//
// Возвращаемое значение:
//    Соответствие - описание соединения
//
Функция Получить(Знач Номер, Знач ОбновитьПринудительно = Ложь, КакСоответствие = Ложь) Экспорт

	Отбор = Новый Соответствие();
	Отбор.Вставить("conn-id", Номер);

	Соединения = Элементы.Список(Отбор, ОбновитьПринудительно, КакСоответствие);

	Если Соединения.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Соединения[0];

КонецФункции // Получить()

// Процедура отключает соединение
//   
// Параметры:
//   Номер                     - Структура    - Номер соединения
//
Процедура Отключить(Знач Номер) Экспорт

	Соединение = Получить(Номер, Истина);

	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Соединение.Отключить();

	ОбновитьДанные(Истина);

КонецПроцедуры // Отключить()
