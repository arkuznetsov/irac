// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/irac/
// ----------------------------------------------------------

Перем Сервер_Ид;    // server
Перем Сервер_Имя;    // name
Перем Сервер_АдресАгента;    // agent-host
Перем Сервер_ПортАгента;    // agent-port
Перем Сервер_Свойства;

Перем Сервер_НазначенияФункциональности;

Перем Кластер_Агент;
Перем Кластер_Владелец;

Перем ПараметрыОбъекта;

Перем ПериодОбновления;
Перем МоментАктуальности;

Перем Лог;

// Конструктор
//   
// Параметры:
//   АгентКластера      - АгентКластера             - ссылка на родительский объект агента кластера
//   Кластер            - Кластер                   - ссылка на родительский объект кластера
//   Сервер             - Строка, Соответствие      - идентификатор сервера в кластере 1С или параметры сервера
//
Процедура ПриСозданииОбъекта(АгентКластера, Кластер, Сервер)

	Лог = Служебный.Лог();

	Если НЕ ЗначениеЗаполнено(Сервер) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.Серверы);

	Кластер_Агент = АгентКластера;
	Кластер_Владелец = Кластер;
	
	Если ТипЗнч(Сервер) = Тип("Соответствие") Тогда
		Сервер_Ид = Сервер["server"];
		ЗаполнитьПараметрыСервера(Сервер);
		МоментАктуальности = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Иначе
		Сервер_Ид = Сервер;
		МоментАктуальности = 0;
	КонецЕсли;

	ПериодОбновления = Служебный.ПериодОбновленияДанныхОбъекта(ЭтотОбъект);
	
	Сервер_НазначенияФункциональности = Новый НазначенияФункциональности(Кластер_Агент, Кластер_Владелец, ЭтотОбъект);
	
КонецПроцедуры // ПриСозданииОбъекта()

// Процедура получает данные от сервиса администрирования кластера 1С
// и сохраняет в локальных переменных
//   
// Параметры:
//   РежимОбновления          - Число        - 1 - обновить данные принудительно (вызов RAC)
//                                             0 - обновить данные только по таймеру
//                                            -1 - не обновлять данные
//   
Процедура ОбновитьДанные(РежимОбновления = 0) Экспорт

	Если НЕ ТребуетсяОбновление(РежимОбновления) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Кластер_Агент.СтрокаПодключения());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_Владелец.ПараметрыАвторизации());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Владелец.Ид());
	ПараметрыКоманды.Вставить("ИдентификаторСервера"        , Ид());
	
	ПараметрыОбъекта.УстановитьЗначенияПараметровКоманд(ПараметрыКоманды);

	КодВозврата = ПараметрыОбъекта.ВыполнитьКоманду("Описание");

	Если НЕ КодВозврата = 0 Тогда
		ВызватьИсключение СтрШаблон("Ошибка получения описание сервера, КодВозврата = %1: %2",
	                                КодВозврата,
	                                Кластер_Агент.ВыводКоманды(Ложь));
	КонецЕсли;
	
	МассивРезультатов = Кластер_Агент.ВыводКоманды();

	Если НЕ ЗначениеЗаполнено(МассивРезультатов) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыСервера(МассивРезультатов[0]);

	МоментАктуальности = ТекущаяУниверсальнаяДатаВМиллисекундах();

КонецПроцедуры // ОбновитьДанные()

// Функция признак необходимости обновления данных
//   
// Параметры:
//   РежимОбновления          - Число        - 1 - обновить данные принудительно (вызов RAC)
//                                             0 - обновить данные только по таймеру
//                                            -1 - не обновлять данные
//
// Возвращаемое значение:
//    Булево - Истина - требуется обновитьданные
//
Функция ТребуетсяОбновление(РежимОбновления = 0) Экспорт

	Возврат Служебный.ТребуетсяОбновление(Сервер_Свойства, МоментАктуальности,
	                                      ПериодОбновления, РежимОбновления);

КонецФункции // ТребуетсяОбновление()

// Процедура заполняет параметры сервера кластера 1С
//   
// Параметры:
//   ДанныеЗаполнения        - Соответствие        - данные, из которых будут заполнены параметры сервера
//   
Процедура ЗаполнитьПараметрыСервера(ДанныеЗаполнения)

	Сервер_АдресАгента = ДанныеЗаполнения.Получить("agent-host");
	Сервер_ПортАгента = Число(ДанныеЗаполнения.Получить("agent-port"));
	Сервер_Имя = ДанныеЗаполнения.Получить("name");

	Служебный.ЗаполнитьСвойстваОбъекта(ЭтотОбъект, Сервер_Свойства, ДанныеЗаполнения);

КонецПроцедуры // ЗаполнитьПараметрыСервера()

// Функция возвращает описание параметров объекта
//   
// Возвращаемое значение:
//    КомандыОбъекта - описание параметров объекта,
//
Функция ПараметрыОбъекта() Экспорт

	Возврат ПараметрыОбъекта;

КонецФункции // ПараметрыОбъекта()

// Функция возвращает идентификатор сервера 1С
//   
// Возвращаемое значение:
//    Строка - идентификатор сервера 1С
//
Функция Ид() Экспорт

	Возврат Сервер_Ид;

КонецФункции // Ид()

// Функция возвращает имя сервера 1С
//   
// Возвращаемое значение:
//    Строка - имя сервера 1С
//
Функция Имя() Экспорт

	Если Служебный.ТребуетсяОбновление(Сервер_Имя, МоментАктуальности, ПериодОбновления) Тогда
		ОбновитьДанные(Перечисления.РежимыОбновленияДанных.Принудительно);
	КонецЕсли;

	Возврат Сервер_Имя;
	
КонецФункции // Имя()

// Функция возвращает адрес сервера 1С
//   
// Возвращаемое значение:
//    Строка - адрес сервера 1С
//
Функция АдресСервера() Экспорт
	
	Если Служебный.ТребуетсяОбновление(Сервер_АдресАгента, МоментАктуальности, ПериодОбновления) Тогда
		ОбновитьДанные(Перечисления.РежимыОбновленияДанных.Принудительно);
	КонецЕсли;

	Возврат Сервер_АдресАгента;
	    
КонецФункции // АдресСервера()
	
// Функция возвращает порт сервера 1С
//   
// Возвращаемое значение:
//    Строка - порт сервера 1С
//
Функция ПортСервера() Экспорт
	
	Если Служебный.ТребуетсяОбновление(Сервер_ПортАгента, МоментАктуальности, ПериодОбновления) Тогда
		ОбновитьДанные(Перечисления.РежимыОбновленияДанных.Принудительно);
	КонецЕсли;

	Возврат Сервер_ПортАгента;
	    
КонецФункции // ПортСервера()
	
// Функция возвращает список требований назначения функциональности сервера 1С
//   
// Возвращаемое значение:
//    НазначенияФункциональности -  список требований назначения функциональности сервера 1С
//
Функция НазначенияФункциональности() Экспорт
	
	Если Служебный.ТребуетсяОбновление(Сервер_НазначенияФункциональности, МоментАктуальности, ПериодОбновления) Тогда
		ОбновитьДанные(Перечисления.РежимыОбновленияДанных.Принудительно);
	КонецЕсли;

	Возврат Сервер_НазначенияФункциональности;
	    
КонецФункции // НазначенияФункциональности()
	
// Функция возвращает значение параметра кластера 1С
//   
// Параметры:
//   ИмяПоля                 - Строка        - Имя параметра кластера
//   РежимОбновления         - Число         - 1 - обновить данные принудительно (вызов RAC)
//                                             0 - обновить данные только по таймеру
//                                            -1 - не обновлять данные
//
// Возвращаемое значение:
//    Произвольный - значение параметра кластера 1С
//
Функция Получить(ИмяПоля, РежимОбновления = 0) Экспорт
	
	ОбновитьДанные(РежимОбновления);

	ЗначениеПоля = Неопределено;

	Если НЕ Найти("ИД, SERVER", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Сервер_Ид;
	ИначеЕсли НЕ Найти("ИМЯ, NAME", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Сервер_Имя;
	ИначеЕсли НЕ Найти("СЕРВЕРАГЕНТА, AGENT-HOST", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Сервер_АдресАгента;
	ИначеЕсли НЕ Найти("ПОРТАГЕНТА, AGENT-PORT", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Сервер_ПортАгента;
	ИначеЕсли НЕ Найти("ПРОФИЛИ, НАЗНАЧЕНИЯФУНКЦИОНАЛЬНОСТИ, ПРОФИЛИНАЗНАЧЕНИЯФУНКЦИОНАЛЬНОСТИ, PROFILES", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Сервер_НазначенияФункциональности;
	Иначе
		ЗначениеПоля = Сервер_Свойства.Получить(ИмяПоля);
	КонецЕсли;
	
	Если ЗначениеПоля = Неопределено Тогда
	
		ОписаниеПараметра = ПараметрыОбъекта.ОписаниеСвойств("ИмяРАК").Получить(ИмяПоля);

		Если НЕ ОписаниеПараметра = Неопределено Тогда
			ЗначениеПоля = Сервер_Свойства.Получить(ОписаниеПараметра["Имя"]);
		КонецЕсли;
	
	КонецЕсли;

	Возврат ЗначениеПоля;
	
КонецФункции // Получить()
	
// Процедура изменяет параметры сервера
//   
// Параметры:
//   ПараметрыСервера         - Структура        - новые параметры сервера
//
Процедура Изменить(Знач ПараметрыСервера = Неопределено) Экспорт

	Если НЕ ТипЗнч(ПараметрыСервера) = Тип("Структура") Тогда
		ПараметрыСервера = Новый Структура();
	КонецЕсли;

	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Кластер_Агент.СтрокаПодключения());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", Кластер_Владелец.ПараметрыАвторизации());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Кластер_Владелец.Ид());
	ПараметрыКоманды.Вставить("ИдентификаторСервера"        , Ид());
	
	Для Каждого ТекЭлемент Из ПараметрыСервера Цикл
		ПараметрыКоманды.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение);
	КонецЦикла;

	ПараметрыОбъекта.УстановитьЗначенияПараметровКоманд(ПараметрыКоманды);

	КодВозврата = ПараметрыОбъекта.ВыполнитьКоманду("Изменить");

	Если НЕ КодВозврата = 0 Тогда
		ВызватьИсключение СтрШаблон("Ошибка изменения параметров сервера, КодВозврата = %1: %2",
	                                Имя(),
	                                Кластер_Агент.ВыводКоманды(Ложь));
	КонецЕсли;

	Лог.Отладка(Кластер_Агент.ВыводКоманды(Ложь));

	ОбновитьДанные(Перечисления.РежимыОбновленияДанных.Принудительно);

КонецПроцедуры // Изменить()
