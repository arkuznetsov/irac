// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/irac/
// ----------------------------------------------------------

Перем Владелец;
Перем Элементы;

Перем МоментАктуальности;
Перем ПериодОбновления;

Процедура ПриСозданииОбъекта(ВладелецЭлементов)

	Элементы = Неопределено;

	Владелец = ВладелецЭлементов;

	ПериодОбновления = 60000;
	МоментАктуальности = 0;

КонецПроцедуры // ПриСозданииОбъекта()

// Процедура заполняет список элементов из переданного массива
//   
// Параметры:
//   МассивЭлементов     - Массив        - элементы, которые будут добавлены
//
Процедура Заполнить(МассивЭлементов) Экспорт

	Элементы = Новый Массив();

	Для Каждого ТекЭлемент Из МассивЭлементов Цикл
		Элементы.Добавить(ТекЭлемент);
	КонецЦикла;

КонецПроцедуры // Заполнить()

// Процедура добавляет элемент в список
//   
// Параметры:
//   Элемент     - Произвольный        - добавляемый элемент
//
Процедура Добавить(Элемент) Экспорт

	Элементы.Добавить(Элемент);

КонецПроцедуры // Добавить()

// Функция признак необходимости обновления данных
//   
// Параметры:
//   ОбновитьПринудительно     - Булево        - Истина - принудительно обновить данные (вызов RAC)
//
// Возвращаемое значение:
//    Булево - Истина - требуется обновитьданные
//
Функция ТребуетсяОбновление(ОбновитьПринудительно = Ложь) Экспорт

	Возврат (ОбновитьПринудительно
		ИЛИ Элементы = Неопределено
		ИЛИ (ПериодОбновления < (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментАктуальности)));

КонецФункции // ТребуетсяОбновление()

// Функция возвращает коллекцию параметров объекта
//   
// Параметры:
//   ИмяПоляКлюча         - Строка    - имя поля, значение которого будет использовано
//                                      в качестве ключа возвращаемого соответствия
//   
// Возвращаемое значение:
//    Соответствие - коллекция параметров объекта, для получения/изменения значений
//
Функция ПараметрыОбъекта(ИмяПоляКлюча = "Имя") Экспорт

	Возврат Владелец.ПараметрыОбъекта(ИмяПоляКлюча);

КонецФункции // ПараметрыОбъекта()

// Функция возвращает список объектов кластера
//   
// Параметры:
//   Отбор                    - Структура    - Структура отбора объектов (<поле>:<значение>)
//   ОбновитьПринудительно    - Булево       - Истина - принудительно обновить данные (вызов RAC)
//   ЭлементыКакСоответствия  - Булево,      - Истина - элементы результата будут преобразованы в соответствия
//                              Строка         с именами свойств в качестве ключей
//                                             <Имя поля> - элементы результата будут преобразованы в соответствия
//                                             со значением указанного поля в качестве ключей ("Имя"|"ИмяРАК")
//                                             Ложь - (по умолчанию) элементы будут возвращены как есть
//
// Возвращаемое значение:
//    Массив - список объектов кластера 1С
//
Функция Список(Знач Отбор = Неопределено
			 , Знач ОбновитьПринудительно = Ложь
			 , Знач ЭлементыКакСоответствия = Ложь) Экспорт

	Владелец.ОбновитьДанные(ОбновитьПринудительно);

	Результат = Служебный.ПолучитьЭлементыИзМассиваСоответствий(Элементы, Отбор);

	ИмяПоляКлюча = "Имя";

	Если ТипЗнч(ЭлементыКакСоответствия) = Тип("Строка") Тогда
		ИмяПоляКлюча = ЭлементыКакСоответствия;
		ЭлементыКакСоответствия = Истина;
	КонецЕсли;

	Если ЭлементыКакСоответствия Тогда
		ПоляЭлемента = Владелец.ПараметрыОбъекта(ИмяПоляКлюча);
		Результат = Служебный.МассивОбъектовВМассивСоответствий(Результат, ПоляЭлемента);
	КонецЕсли;

	Возврат Результат;

КонецФункции // Список()

// Функция возвращает список объектов кластера
//   
// Параметры:
//   ПоляИерархии             - Строка,      - имена полей для построения иерархии списка объектов,
//                              Массив         разделенные "," или массив имен полей
//   ОбновитьПринудительно    - Булево       - Истина - принудительно обновить данные (вызов RAC)
//   ЭлементыКакСоответствия  - Булево,      - Истина - элементы результата будут преобразованы в соответствия
//                              Строка         с именами свойств в качестве ключей
//                                             <Имя поля> - элементы результата будут преобразованы в соответствия
//                                             со значением указанного поля в качестве ключей ("Имя"|"ИмяРАК")
//                                             Ложь - (по умолчанию) элементы будут возвращены как есть
//
// Возвращаемое значение:
//    Соответствие - список объектов кластера 1С
//        <имя поля объекта>    - Массив(Соответствие), Соответствие    - список объектов кластера или следующий уровень
//
Функция ИерархическийСписок(Знач ПоляИерархии
						  , Знач ОбновитьПринудительно = Ложь
						  , Знач ЭлементыКакСоответствия = Ложь) Экспорт

	Владелец.ОбновитьДанные(ОбновитьПринудительно);

	ЭлементыДляОбработки = Элементы;

	ИменаПолейКлюча = Новый Массив();
	ИменаПолейКлюча.Добавить("Имя");
	ИменаПолейКлюча.Добавить("ИмяРАК");
	
	Если ТипЗнч(ЭлементыКакСоответствия) = Тип("Строка") Тогда
		Если ИменаПолейКлюча[1] = ЭлементыКакСоответствия Тогда
			ИменаПолейКлюча[1] = ИменаПолейКлюча[0];
			ИменаПолейКлюча[0] = ЭлементыКакСоответствия;
		КонецЕсли;
		ЭлементыКакСоответствия = Истина;
	КонецЕсли;

	ПоляЭлемента0 = Владелец.ПараметрыОбъекта(ИменаПолейКлюча[0]);
	ПоляЭлемента1 = Владелец.ПараметрыОбъекта(ИменаПолейКлюча[1]);

	Если ТипЗнч(ПоляИерархии) = Тип("Строка") Тогда
		ПоляИерархии = СтрРазделить(ПоляИерархии, ",", Ложь);
	КонецЕсли;

	Для й = 0 По ПоляИерархии.ВГраница() Цикл
		ОписаниеПоля = ПоляЭлемента0.Получить(ПоляИерархии[й]);
		Если ОписаниеПоля = Неопределено Тогда
			ОписаниеПоля = ПоляЭлемента1.Получить(ПоляИерархии[й]);
		КонецЕсли;
		ПоляИерархии[й] = ОписаниеПоля[ИменаПолейКлюча[0]];
	КонецЦикла;

	Если ЭлементыКакСоответствия Тогда
		ЭлементыДляОбработки = Служебный.МассивОбъектовВМассивСоответствий(Элементы, ПоляЭлемента0);
	КонецЕсли;

	Результат = Служебный.ИерархическоеПредставлениеМассиваСоответствий(ЭлементыДляОбработки, ПоляИерархии);
	
	Возврат Результат;

КонецФункции // ИерархическийСписок()

// Функция возвращает количество объектов в списке
//   
// Возвращаемое значение:
//    Число - количество объектов в списке
//
Функция Количество() Экспорт

	Владелец.ОбновитьДанные();

	Если Элементы = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Элементы.Количество();

КонецФункции // Количество()

// Процедура устанавливает значение периода обновления
//   
// Параметры:
//   НовыйПериодОбновления     - Число        - новый период обновления
//
Процедура УстановитьПериодОбновления(НовыйПериодОбновления) Экспорт

	ПериодОбновления = НовыйПериодОбновления;

КонецПроцедуры // УстановитьПериодОбновления()

// Процедура устанавливает новое значение момента актуальности данных
//   
Процедура УстановитьАктуальность() Экспорт

	МоментАктуальности = ТекущаяУниверсальнаяДатаВМиллисекундах();

КонецПроцедуры // УстановитьАктуальность()
