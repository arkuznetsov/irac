// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/irac/
// ----------------------------------------------------------

Перем Кластер_Ид;              // (cluster) - идентификатор кластера
Перем Кластер_Имя;             // (name) - имя кластера
Перем Кластер_АдресСервера;    // (host) - адрес сервера кластера
Перем Кластер_ПортСервера;     // (port) - порт сервера кластера
Перем Кластер_Свойства;        // значения свойств этого объекта-кластера

Перем Кластер_Агент;           // объект-агент управления кластером
Перем Кластер_Администраторы;  // объект-список администраторов кластера
Перем Кластер_Серверы;         // объект-список серверов кластера
Перем Кластер_Менеджеры;       // объект-список менеджеров кластера
Перем Кластер_Процессы;        // объект-список рабочих процессов кластера
Перем Кластер_Сервисы;         // объект-список сервисов кластера
Перем Кластер_Сеансы;          // объект-список сеансов кластера
Перем Кластер_Соединения;      // объект-список соединений кластера
Перем Кластер_Блокировки;      // объект-список блокировок кластера
Перем Кластер_ИБ;              // объект-список информационных баз кластера
Перем Кластер_Профили;         // объект-список профилей кластера
Перем Кластер_Счетчики;        // объект-список счетчиков потребления ресурсов кластера
Перем Кластер_Ограничения;     // объект-список ограничений потребления ресурсов кластера

Перем ПараметрыОбъекта;        // параметры этого объекта управления кластером

Перем ПериодОбновления;        // период обновления данных (повторный вызов RAC)
Перем МоментАктуальности;      // последний момент времени обновления данных (время последнего вызова RAC)

Перем Лог;                     // логгер

// Конструктор
//   
// Параметры:
//   АгентКластера          - АгентКластера           - ссылка на родительский объект агента кластера
//   Кластер                - Строка, Соответствие    - идентификатор кластера или параметры кластера
//   Администратор          - Строка                  - имя администратора кластера 1С
//   ПарольАдминистратора   - Строка                  - пароль администратора кластера 1С
//
Процедура ПриСозданииОбъекта(АгентКластера, Кластер, Администратор = "", ПарольАдминистратора = "")

	Лог = Служебный.Лог();

	Если НЕ ЗначениеЗаполнено(Кластер) Тогда
		Возврат;
	КонецЕсли;

	Кластер_Агент = АгентКластера;
	
	ПараметрыОбъекта = Новый КомандыОбъекта(Кластер_Агент, Перечисления.РежимыАдминистрирования.Кластеры);

	Если ТипЗнч(Кластер) = Тип("Соответствие") Тогда
		Кластер_Ид = Кластер["cluster"];
		ЗаполнитьПараметрыКластера(Кластер);
		МоментАктуальности = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Иначе
		Кластер_Ид = Кластер;
		МоментАктуальности = 0;
	КонецЕсли;

	Если ЗначениеЗаполнено(Администратор) Тогда
		Кластер_Агент.ДобавитьАдминистратораКластера(Кластер_Ид, Администратор, ПарольАдминистратора);
	КонецЕсли;

	ПериодОбновления = Служебный.ПериодОбновленияДанныхОбъекта(ЭтотОбъект);
	
	Кластер_Администраторы = Новый АдминистраторыКластера(Кластер_Агент, ЭтотОбъект);
	Кластер_Серверы        = Новый СерверыКластера(Кластер_Агент, ЭтотОбъект);
	Кластер_Менеджеры      = Новый МенеджерыКластера(Кластер_Агент, ЭтотОбъект);
	Кластер_Процессы       = Новый РабочиеПроцессы(Кластер_Агент, ЭтотОбъект);
	Кластер_Сервисы        = Новый Сервисы(Кластер_Агент, ЭтотОбъект);
	Кластер_ИБ             = Новый ИнформационныеБазы(Кластер_Агент, ЭтотОбъект);
	Кластер_Сеансы         = Новый Сеансы(Кластер_Агент, ЭтотОбъект);
	Кластер_Соединения     = Новый Соединения(Кластер_Агент, ЭтотОбъект);
	Кластер_Блокировки     = Новый Блокировки(Кластер_Агент, ЭтотОбъект);
	Кластер_Профили        = Новый ПрофилиБезопасности(Кластер_Агент, ЭтотОбъект);
	Кластер_Счетчики       = Новый СчетчикиРесурсов(Кластер_Агент, ЭтотОбъект);
	Кластер_Ограничения    = Новый ОграниченияРесурсов(Кластер_Агент, ЭтотОбъект);
	
КонецПроцедуры // ПриСозданииОбъекта()

// Процедура получает данные от сервиса администрирования кластера 1С
// и сохраняет в локальных переменных
//   
// Параметры:
//   РежимОбновления           - Число        - 1 - обновить данные принудительно (вызов RAC)
//                                              0 - обновить данные только по таймеру
//                                             -1 - не обновлять данные
//   
Процедура ОбновитьДанные(РежимОбновления = 0) Экспорт

	Если НЕ ТребуетсяОбновление(РежимОбновления) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"   , Кластер_Агент.СтрокаПодключения());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"     , Ид());

	ПараметрыОбъекта.УстановитьЗначенияПараметровКоманд(ПараметрыКоманды);
	    
	ПараметрыОбъекта.ВыполнитьКоманду("Описание");

	МассивРезультатов = Кластер_Агент.ВыводКоманды();

	Если НЕ Кластер_Агент.КодВозврата() = 0 Тогда
		ТекстОшибки = СтрШаблон("Ошибка получения данных кластера ""%1"":", Кластер_Агент.СтрокаПодключения());
		Для Каждого ТекРезультат Из МассивРезультатов[0] Цикл
			ТекстОшибки = СтрШаблон("%1%2%3", ТекстОшибки, Символы.ПС, ТекРезультат.Ключ);
		КонецЦикла;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(МассивРезультатов) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыКластера(МассивРезультатов[0]);

	МоментАктуальности = ТекущаяУниверсальнаяДатаВМиллисекундах();

КонецПроцедуры // ОбновитьДанные()

// Функция признак необходимости обновления данных
//   
// Параметры:
//   РежимОбновления           - Число        - 1 - обновить данные принудительно (вызов RAC)
//                                              0 - обновить данные только по таймеру
//                                             -1 - не обновлять данные
//
// Возвращаемое значение:
//    Булево - Истина - требуется обновитьданные
//
Функция ТребуетсяОбновление(РежимОбновления = 0) Экспорт

	Возврат Служебный.ТребуетсяОбновление(Кластер_Свойства, МоментАктуальности,
	                                      ПериодОбновления, РежимОбновления);

КонецФункции // ТребуетсяОбновление()

// Процедура заполняет параметры кластера 1С
//   
// Параметры:
//   ДанныеЗаполнения        - Соответствие        - данные, из которых будут заполнены параметры кластера
//   
Процедура ЗаполнитьПараметрыКластера(ДанныеЗаполнения)

	Кластер_АдресСервера    = ДанныеЗаполнения.Получить("host");
	Кластер_ПортСервера     = Число(ДанныеЗаполнения.Получить("port"));
	Кластер_Имя             = ДанныеЗаполнения.Получить("name");

	Служебный.ЗаполнитьСвойстваОбъекта(ЭтотОбъект, Кластер_Свойства, ДанныеЗаполнения);

КонецПроцедуры // ЗаполнитьПараметрыКластера()

// Функция возвращает описание параметров объекта
//   
// Возвращаемое значение:
//    КомандыОбъекта - описание параметров объекта,
//
Функция ПараметрыОбъекта() Экспорт

	Возврат ПараметрыОбъекта;

КонецФункции // ПараметрыОбъекта()

// Функция возвращает структуру параметров авторизации в кластере 1С
//   
// Возвращаемое значение:
//    Строка - структура параметров авторизации в кластере 1С
//
Функция ПараметрыАвторизации() Экспорт
	
	Возврат Служебный.ПараметрыАвторизации(Перечисления.РежимыАдминистрирования.Кластеры,
	                                       Кластер_Агент.ПолучитьАдминистратораКластера(Ид()));

КонецФункции // ПараметрыАвторизации()

// Функция возвращает строку параметров авторизации в кластере 1С
//   
// Возвращаемое значение:
//    Строка - строка параметров авторизации в кластере 1С
//
Функция СтрокаАвторизации() Экспорт
	
	Возврат Служебный.СтрокаАвторизации(ПараметрыАвторизации());
	
КонецФункции // СтрокаАвторизации()

// Процедура устанавливает параметры авторизации в кластере 1С
//   
// Параметры:
//   Администратор         - Строка    - администратор кластера 1С
//   Пароль                - Строка    - пароль администратора кластера 1С
//
Процедура УстановитьАдминистратора(Администратор, Пароль) Экспорт
	
	Кластер_Агент.ДобавитьАдминистратораКластера(Ид(), Администратор, Пароль);
	
КонецПроцедуры // УстановитьАдминистратора()
	
// Функция возвращает идентификатор кластера 1С
//   
// Возвращаемое значение:
//    Строка - идентификатор кластера 1С
//
Функция Ид() Экспорт

	Возврат Кластер_Ид;

КонецФункции // Ид()

// Функция возвращает имя кластера 1С
//   
// Возвращаемое значение:
//    Строка - имя кластера 1С
//
Функция Имя() Экспорт

	Если Служебный.ТребуетсяОбновление(Кластер_Имя, МоментАктуальности, ПериодОбновления) Тогда
		ОбновитьДанные(Перечисления.РежимыОбновленияДанных.Принудительно);
	КонецЕсли;

	Возврат Кластер_Имя;
	
КонецФункции // Имя()

// Функция возвращает адрес сервера кластера 1С
//   
// Возвращаемое значение:
//    Строка - адрес сервера кластера 1С
//
Функция АдресСервера() Экспорт
	
	Если Служебный.ТребуетсяОбновление(Кластер_АдресСервера, МоментАктуальности, ПериодОбновления) Тогда
		ОбновитьДанные(Перечисления.РежимыОбновленияДанных.Принудительно);
	КонецЕсли;

	Возврат Кластер_АдресСервера;
	    
КонецФункции // АдресСервера()
	
// Функция возвращает порт сервера кластера 1С
//   
// Возвращаемое значение:
//    Строка - порт сервера кластера 1С
//
Функция ПортСервера() Экспорт
	
	Если Служебный.ТребуетсяОбновление(Кластер_ПортСервера, МоментАктуальности, ПериодОбновления) Тогда
		ОбновитьДанные(Перечисления.РежимыОбновленияДанных.Принудительно);
	КонецЕсли;

	Возврат Кластер_ПортСервера;
	    
КонецФункции // ПортСервера()
	
// Функция возвращает список администраторов кластера 1С
//   
// Возвращаемое значение:
//    Соответствие - список администраторов кластера 1С
//
Функция Администраторы() Экспорт

	Возврат Кластер_Администраторы;

КонецФункции // Администраторы()

// Функция возвращает список серверов кластера 1С
//   
// Возвращаемое значение:
//    СерверыКластера - список серверов кластера 1С
//
Функция Серверы() Экспорт
	
	Возврат Кластер_Серверы;
	
КонецФункции // Серверы()
	
// Функция возвращает список менеджеров кластера 1С
//   
// Возвращаемое значение:
//    МенеджерыКластера - список менеджеров кластера 1С
//
Функция Менеджеры() Экспорт
	
	Возврат Кластер_Менеджеры;
	
КонецФункции // Менеджеры()
	
// Функция возвращает список рабочих процессов 1С
//   
// Возвращаемое значение:
//    РабочиеПроцессы - список рабочих процессов 1С
//
Функция РабочиеПроцессы() Экспорт
	
	Возврат Кластер_Процессы;
	
КонецФункции // РабочиеПроцессы()
	
// Функция возвращает список сервисов 1С
//   
// Возвращаемое значение:
//    РабочиеПроцессы - список сервисов 1С
//
Функция Сервисы() Экспорт
	
	Возврат Кластер_Сервисы;
	
КонецФункции // Сервисы()
	
// Функция возвращает список информационных баз 1С
//   
// Возвращаемое значение:
//    ИнформационныеБазы - список информационных баз 1С
//
Функция ИнформационныеБазы() Экспорт
	
	Возврат Кластер_ИБ;
	
КонецФункции // ИнформационныеБазы()
	
// Функция возвращает список сеансов 1С
//   
// Возвращаемое значение:
//    Сеансы - список сеансов 1С
//
Функция Сеансы() Экспорт
	
	Возврат Кластер_Сеансы;
	
КонецФункции // Сеансы()
	
// Функция возвращает список соединений 1С
//   
// Возвращаемое значение:
//    Сеансы - список соединений 1С
//
Функция Соединения() Экспорт
	
	Возврат Кластер_Соединения;
	
КонецФункции // Соединения()
	
// Функция возвращает список блокировок 1С
//   
// Возвращаемое значение:
//    Сеансы - список блокировок 1С
//
Функция Блокировки() Экспорт
	
	Возврат Кластер_Блокировки;
	
КонецФункции // Блокировки()
	
// Функция возвращает список профилей безопасности кластера 1С
//   
// Возвращаемое значение:
//    Сеансы - список профилей безопасности кластера 1С
//
Функция ПрофилиБезопасности() Экспорт
	
	Возврат Кластер_Профили;
	
КонецФункции // ПрофилиБезопасности()

// Функция возвращает список счетчиков ресурсов кластера 1С
//   
// Возвращаемое значение:
//    СчетчикиРесурсов - список счетчиков ресурсов кластера 1С
//
Функция СчетчикиРесурсов() Экспорт
	
	Возврат Кластер_Счетчики;
	
КонецФункции // СчетчикиРесурсов()

// Функция возвращает список ограничений ресурсов кластера 1С
//   
// Возвращаемое значение:
//    ОграниченияРесурсов - список ограничений ресурсов кластера 1С
//
Функция ОграниченияРесурсов() Экспорт
	
	Возврат Кластер_Ограничения;
	
КонецФункции // ОграниченияРесурсов()

// Функция возвращает значение параметра кластера 1С
//
// Параметры:
//   ИмяПоля                 - Строка        - Имя параметра кластера
//   РежимОбновления         - Число         - 1 - обновить данные принудительно (вызов RAC)
//                                             0 - обновить данные только по таймеру
//                                            -1 - не обновлять данные
//
// Возвращаемое значение:
//    Произвольный - значение параметра кластера 1С
//
Функция Получить(ИмяПоля, РежимОбновления = 0) Экспорт
	
	ОбновитьДанные(РежимОбновления);

	ЗначениеПоля = Неопределено;
	
	Если НЕ Найти("ИД, CLUSTER", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Кластер_Ид;
	ИначеЕсли НЕ Найти("ИМЯ, NAME", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Кластер_Имя;
	ИначеЕсли НЕ Найти("АДРЕССЕРВЕРА, HOST", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Кластер_АдресСервера;
	ИначеЕсли НЕ Найти("ПОРТСЕРВЕРА, PORT", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Кластер_ПортСервера;
	ИначеЕсли НЕ Найти("АДМИНИСТРАТОРЫ, ADMINISTRATORS", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Кластер_Администраторы;
	ИначеЕсли НЕ Найти("СЕРВЕРЫ, SERVERS", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Кластер_Серверы;
	ИначеЕсли НЕ Найти("МЕНЕДЖЕРЫ, MANAGERS", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Кластер_Менеджеры;
	ИначеЕсли НЕ Найти("ПРОЦЕССЫ, PROCESSES", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Кластер_Процессы;
	ИначеЕсли НЕ Найти("СЕАНСЫ, SESSIONS", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Кластер_Сеансы;
	ИначеЕсли НЕ Найти("СОЕДИНЕНИЯ, CONNECTIONS", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Кластер_Соединения;
	ИначеЕсли НЕ Найти("БЛОКИРОВКИ, LOCKS", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Кластер_Блокировки;
	ИначеЕсли НЕ Найти("ИБ, ИНФОРМАЦИОННЫЕБАЗЫ, IB, INFOBASES", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Кластер_ИБ;
	ИначеЕсли НЕ Найти("ПРОФИЛИ, PROFILES", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Кластер_Профили;
	ИначеЕсли НЕ Найти("СЧЕТЧИКИ, COUNTERS", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Кластер_Счетчики;
	ИначеЕсли НЕ Найти("ОГРАНИЧЕНИЯ, LIMITS", ВРег(ИмяПоля)) = 0 Тогда
		ЗначениеПоля = Кластер_Ограничения;
	Иначе
		ЗначениеПоля = Кластер_Свойства.Получить(ИмяПоля);
	КонецЕсли;
	
	Если ЗначениеПоля = Неопределено Тогда
	
		ОписаниеПараметра = ПараметрыОбъекта.ОписаниеСвойств("ИмяРАК").Получить(ИмяПоля);

		Если НЕ ОписаниеПараметра = Неопределено Тогда
			ЗначениеПоля = Кластер_Свойства.Получить(ОписаниеПараметра["Имя"]);
		КонецЕсли;
	
	КонецЕсли;

	Возврат ЗначениеПоля;
	
КонецФункции // Получить()

// Процедура изменяет параметры кластера
//
// Параметры:
//   Имя                     - Строка        - новое имя кластера
//   ПараметрыКластера       - Структура        - новые параметры кластера
//
Процедура Изменить(Знач Имя = "", Знач ПараметрыКластера = Неопределено) Экспорт

	Если НЕ ТипЗнч(ПараметрыКластера) = Тип("Структура") Тогда
		ПараметрыКластера = Новый Структура();
	КонецЕсли;

	ПараметрыКоманды = Новый Соответствие();
	ПараметрыКоманды.Вставить("СтрокаПодключенияАгента"     , Кластер_Агент.СтрокаПодключения());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииАгента"  , Кластер_Агент.ПараметрыАвторизации());
	ПараметрыКоманды.Вставить("ИдентификаторКластера"       , Ид());
	ПараметрыКоманды.Вставить("ПараметрыАвторизацииКластера", ЭтотОбъект.ПараметрыАвторизации());

	Если ЗначениеЗаполнено(Имя) Тогда
		ПараметрыКоманды.Вставить("Имя"                , Имя);
	КонецЕсли;

	Для Каждого ТекЭлемент Из ПараметрыКластера Цикл
		ПараметрыКоманды.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение);
	КонецЦикла;

	ПараметрыОбъекта.УстановитьЗначенияПараметровКоманд(ПараметрыКоманды);

	ПараметрыОбъекта.ВыполнитьКоманду("Изменить");

	Лог.Отладка(Кластер_Агент.ВыводКоманды(Ложь));

	Кластер_Свойства = Неопределено;

КонецПроцедуры // Изменить()
